openapi: 3.0.0
paths:
  /api/v2/auth:
    get:
      operationId: auth-get
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": &ref_0
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_1
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_2
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_3
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_4
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_5
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_6
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_7
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_8
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security:
        - bearer: []
      summary: >-
        Проверяет, авторизован ли пользователь и выдает о пользователе полную
        информацию
      tags: &ref_9
        - auth
    patch:
      operationId: auth-update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      security:
        - bearer: []
      summary: Изменение аккаунта пользователя
      tags: *ref_9
  /api/v2/auth/login:
    post:
      operationId: auth-login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Авторизация пользователя
      tags: *ref_9
  /api/v2/auth/register:
    post:
      operationId: auth-register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Регистрация пользователя
      tags: *ref_9
  /api/v2/auth/refresh:
    post:
      operationId: refresh
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRefreshRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRefreshResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Обновление токена
      tags: *ref_9
  /api/v2/auth/email-verify:
    post:
      operationId: auth-email-verify
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Подтвердить email пользователя
      tags: *ref_9
  /api/v2/auth/reset-password:
    post:
      operationId: auth-reset-password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordInvitationRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Отправить на почту пользователю разрешение на смену пароля
      tags: *ref_9
  /api/v2/auth/reset-password-verify:
    post:
      operationId: auth-reset-password-verify
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordVerifyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Меняет пароль пользователя по приглашению из почты
      tags: *ref_9
  /api/v2/auth/disable:
    patch:
      operationId: auth-disable
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      security:
        - bearer: []
      summary: Скрытие аккаунта пользователя
      tags: *ref_9
  /api/v2/auth/monitor:
    post:
      operationId: auth-monitor
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthMonitorRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRefreshResponse"
        "400": *ref_0
        "401": *ref_1
        "403": *ref_2
        "404": *ref_3
        "406": *ref_4
        "409": *ref_5
        "412": *ref_6
        "500": *ref_7
        "501": *ref_8
      summary: Авторизация монитора
      tags: *ref_9
  /api/v2/monitor:
    post:
      operationId: monitors-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": &ref_10
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_11
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_12
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_13
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_14
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_15
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_16
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_17
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_18
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_19
        - bearer: []
      summary: Получение списка мониторов
      tags: &ref_20
        - monitor
    put:
      operationId: monitor-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Создание монитора
      tags: *ref_20
  /api/v2/monitor/playlist:
    patch:
      operationId: monitor-playlist-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Создание связки плэйлиста и монитора
      tags: *ref_20
    delete:
      operationId: monitor-playlist-delete
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Удаление связки плэйлиста и монитора
      tags: *ref_20
  /api/v2/monitor/{monitorId}:
    get:
      operationId: monitor-get
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Получение монитора
      tags: *ref_20
    patch:
      operationId: monitor-update
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Изменение монитора
      tags: *ref_20
    delete:
      operationId: monitor-delete
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Удаление монитора
      tags: *ref_20
  /api/v2/monitor/{monitorId}/upload-photos:
    put:
      operationId: monitor-upload-photos
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  description: Файл(ы)
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Загрузка файлов картинок монитора
      tags: *ref_20
  /api/v2/monitor/{monitorId}/upload-documents:
    put:
      operationId: monitor-upload-documents
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  description: Файл(ы)
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Загрузка документов монитора
      tags: *ref_20
  /api/v2/monitor/{monitorId}/favoritePlus:
    get:
      operationId: monitor-favorite-plus
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Избранное '+'
      tags: *ref_20
  /api/v2/monitor/{monitorId}/favoriteMinus:
    get:
      operationId: monitor-favorite-minus
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Избранное '-'
      tags: *ref_20
  /api/v2/monitor/{monitorId}/bid:
    get:
      operationId: monitor-get-bid
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidsGetResponse"
        "400": *ref_10
        "401": *ref_11
        "403": *ref_12
        "404": *ref_13
        "406": *ref_14
        "409": *ref_15
        "412": *ref_16
        "500": *ref_17
        "501": *ref_18
      security: *ref_19
      summary: Получение плэйлиста монитора
      tags: *ref_20
  /api/v2/editor:
    post:
      operationId: editors-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorsGetResponse"
        "400": &ref_21
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_22
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_23
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_24
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_25
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_26
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_27
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_28
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_29
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_30
        - bearer: []
      summary: Получение списка редакторов
      tags: &ref_31
        - editor
    put:
      operationId: editor-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Создание редактора
      tags: *ref_31
  /api/v2/editor/{editorId}:
    get:
      operationId: editor-get
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Получение редактора
      tags: *ref_31
    patch:
      operationId: editor-update
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Изменить редактор
      tags: *ref_31
    delete:
      operationId: editor-delete
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Удаление редактора
      tags: *ref_31
  /api/v2/editor/layer/{editorId}:
    put:
      operationId: editor-layer-create
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Создание слоя редактора
      tags: *ref_31
  /api/v2/editor/layer/{editorId}/{layerId}:
    get:
      operationId: editor-layer-get
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Получение слоя редактора
      tags: *ref_31
    patch:
      operationId: editor-layer-update
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Изменить слой редактора
      tags: *ref_31
    delete:
      operationId: editor-layer-delete
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Удаление слоя редактора
      tags: *ref_31
  /api/v2/editor/layer/{editorId}/{layerId}/{moveIndex}:
    put:
      operationId: editor-layer-move
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
        - name: moveIndex
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Изменить очередь слоя редактора
      tags: *ref_31
  /api/v2/editor/export/{editorId}:
    get:
      operationId: editor-export-status
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetRenderingStatusResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Узнать статус экспорта видео из редактора
      tags: *ref_31
    post:
      operationId: editor-export
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorExportRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetRenderingStatusResponse"
        "400": *ref_21
        "401": *ref_22
        "403": *ref_23
        "404": *ref_24
        "406": *ref_25
        "409": *ref_26
        "412": *ref_27
        "500": *ref_28
        "501": *ref_29
      security: *ref_30
      summary: Экспорт видео из редактора
      tags: *ref_31
  /api/v2/file:
    post:
      operationId: files-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesGetResponse"
        "400": &ref_32
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_33
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_34
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_35
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_36
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_37
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_38
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_39
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_40
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_41
        - bearer: []
      summary: Получение списка файлов
      tags: &ref_42
        - file
    put:
      operationId: file-upload
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  description: Файл(ы)
                  items:
                    type: string
                    format: binary
                folderId:
                  type: string
                  format: uuid
                  description: Папка куда загружать
                  nullable: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesUploadResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Загрузка файлов
      tags: *ref_42
    patch:
      operationId: files-update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Изменить файлы
      tags: *ref_42
    delete:
      operationId: files-delete
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesDeleteRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Удаление файла
      tags: *ref_42
  /api/v2/file/copy:
    patch:
      operationId: files-copy
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesCopyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Скопировать файлы
      tags: *ref_42
  /api/v2/file/preview/{fileId}:
    get:
      operationId: file-download-preview
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/webm:
              encoding:
                video_webm:
                  contentType: video/webm
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Получить файл превью
      tags: *ref_42
  /api/v2/file/download/{fileId}:
    get:
      operationId: file-download
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/mp4:
              encoding:
                video_mp4:
                  contentType: video/mp4
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
            image/png:
              encoding:
                image_png:
                  contentType: image/png
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Скачивание файла
      tags: *ref_42
  /api/v2/file/{fileId}:
    post:
      operationId: file-get
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Получить файл
      tags: *ref_42
    patch:
      operationId: file-update
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Изменить файл
      tags: *ref_42
    delete:
      operationId: file-delete
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "406": *ref_36
        "409": *ref_37
        "412": *ref_38
        "500": *ref_39
        "501": *ref_40
      security: *ref_41
      summary: Удаление файла
      tags: *ref_42
  /api/v2/folder:
    post:
      operationId: folders-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoldersGetResponse"
        "400": &ref_43
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_44
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_45
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_46
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_47
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_48
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_49
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_50
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_51
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_52
        - bearer: []
      summary: Получение списка папок
      tags: &ref_53
        - folder
    put:
      operationId: folder-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderCreateRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Создание новой папки
      tags: *ref_53
    patch:
      operationId: folders-update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Изменение информации о папках
      tags: *ref_53
    delete:
      operationId: folders-delete
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersDeleteRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Удаление папок
      tags: *ref_53
  /api/v2/folder/copy:
    patch:
      operationId: folders-copy
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersCopyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Копирование папок
      tags: *ref_53
  /api/v2/folder/{folderId}:
    get:
      operationId: folder-get
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Получение информации о папке
      tags: *ref_53
    patch:
      operationId: folder-update
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderIdUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Изменение информации о папке
      tags: *ref_53
    delete:
      operationId: folder-delete
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_43
        "401": *ref_44
        "403": *ref_45
        "404": *ref_46
        "406": *ref_47
        "409": *ref_48
        "412": *ref_49
        "500": *ref_50
        "501": *ref_51
      security: *ref_52
      summary: Удаление папки
      tags: *ref_53
  /api/v2/user:
    post:
      operationId: users-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersGetResponse"
        "400": &ref_54
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_55
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_56
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_57
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_58
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_59
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_60
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_61
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_62
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_63
        - bearer: []
      summary: Получение информации о пользователях (только администратор)
      tags: &ref_64
        - user
  /api/v2/user/disable/{userId}:
    patch:
      operationId: user-disable
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_54
        "401": *ref_55
        "403": *ref_56
        "404": *ref_57
        "406": *ref_58
        "409": *ref_59
        "412": *ref_60
        "500": *ref_61
        "501": *ref_62
      security: *ref_63
      summary: Отключение аккаунта пользователя (только администратор)
      tags: *ref_64
  /api/v2/user/enable/{userId}:
    patch:
      operationId: user-enable
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_54
        "401": *ref_55
        "403": *ref_56
        "404": *ref_57
        "406": *ref_58
        "409": *ref_59
        "412": *ref_60
        "500": *ref_61
        "501": *ref_62
      security: *ref_63
      summary: Открытие аккаунта пользователя (только администратор)
      tags: *ref_64
  /api/v2/user/{userId}:
    get:
      operationId: user-get
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_54
        "401": *ref_55
        "403": *ref_56
        "404": *ref_57
        "406": *ref_58
        "409": *ref_59
        "412": *ref_60
        "500": *ref_61
        "501": *ref_62
      security: *ref_63
      summary: Получение информации о пользователе (только администратор)
      tags: *ref_64
    patch:
      operationId: user-update
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_54
        "401": *ref_55
        "403": *ref_56
        "404": *ref_57
        "406": *ref_58
        "409": *ref_59
        "412": *ref_60
        "500": *ref_61
        "501": *ref_62
      security: *ref_63
      summary: Изменение информации о пользователе (только администратор)
      tags: *ref_64
    delete:
      operationId: user-delete
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_54
        "401": *ref_55
        "403": *ref_56
        "404": *ref_57
        "406": *ref_58
        "409": *ref_59
        "412": *ref_60
        "500": *ref_61
        "501": *ref_62
      security: *ref_63
      summary: Удаление аккаунта пользователя (только администратор)
      tags: *ref_64
  /api/v2/invoice:
    post:
      operationId: invoices-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoicesGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicesGetResponse"
        "400": &ref_65
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_66
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_67
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_68
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_69
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_70
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_71
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_72
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_73
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_74
        - bearer: []
      summary: Получение списка счётов
      tags: &ref_75
        - invoice
    put:
      operationId: invoice-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceGetResponse"
        "400": *ref_65
        "401": *ref_66
        "403": *ref_67
        "404": *ref_68
        "406": *ref_69
        "409": *ref_70
        "412": *ref_71
        "500": *ref_72
        "501": *ref_73
      security: *ref_74
      summary: Выставление счета
      tags: *ref_75
  /api/v2/invoice/upload/{invoiceId}:
    post:
      operationId: invoice-upload
      parameters:
        - name: invoiceId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  description: Файл
                  format: binary
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceGetResponse"
        "400": *ref_65
        "401": *ref_66
        "403": *ref_67
        "404": *ref_68
        "406": *ref_69
        "409": *ref_70
        "412": *ref_71
        "500": *ref_72
        "501": *ref_73
      security: *ref_74
      summary: Загрузка счёта (только бухгалтер)
      tags: *ref_75
  /api/v2/invoice/confirmed/{invoiceId}:
    get:
      operationId: invoice-confirmed
      parameters:
        - name: invoiceId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceGetResponse"
        "400": *ref_65
        "401": *ref_66
        "403": *ref_67
        "404": *ref_68
        "406": *ref_69
        "409": *ref_70
        "412": *ref_71
        "500": *ref_72
        "501": *ref_73
      security: *ref_74
      summary: Подтверждение счёта (только бухгалтер)
      tags: *ref_75
  /api/v2/invoice/payed/{invoiceId}:
    get:
      operationId: invoice-payed
      parameters:
        - name: invoiceId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
        "400": *ref_65
        "401": *ref_66
        "403": *ref_67
        "404": *ref_68
        "406": *ref_69
        "409": *ref_70
        "412": *ref_71
        "500": *ref_72
        "501": *ref_73
      security: *ref_74
      summary: Оплата по счету (только бухгалтер)
      tags: *ref_75
  /api/v2/invoice/download/{invoiceId}/{format}:
    get:
      operationId: invoice-download
      parameters:
        - name: invoiceId
          required: true
          in: path
          schema:
            type: string
        - name: format
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": *ref_65
        "401": *ref_66
        "403": *ref_67
        "404": *ref_68
        "406": *ref_69
        "409": *ref_70
        "412": *ref_71
        "500": *ref_72
        "501": *ref_73
      security: *ref_74
      summary: Метод для скачивания файла excel/pdf/etc
      tags: *ref_75
  /api/v2/playlist:
    post:
      operationId: playlists-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistsGetResponse"
        "400": &ref_76
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_77
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_78
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_79
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_80
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_81
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_82
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_83
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_84
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_85
        - bearer: []
      summary: Получение списка плэйлистов
      tags: &ref_86
        - playlist
    put:
      operationId: playlist-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_76
        "401": *ref_77
        "403": *ref_78
        "404": *ref_79
        "406": *ref_80
        "409": *ref_81
        "412": *ref_82
        "500": *ref_83
        "501": *ref_84
      security: *ref_85
      summary: Создание плэйлиста
      tags: *ref_86
  /api/v2/playlist/{playlistId}:
    get:
      operationId: playlist-get
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_76
        "401": *ref_77
        "403": *ref_78
        "404": *ref_79
        "406": *ref_80
        "409": *ref_81
        "412": *ref_82
        "500": *ref_83
        "501": *ref_84
      security: *ref_85
      summary: Получение плэйлиста
      tags: *ref_86
    patch:
      operationId: playlist-update
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_76
        "401": *ref_77
        "403": *ref_78
        "404": *ref_79
        "406": *ref_80
        "409": *ref_81
        "412": *ref_82
        "500": *ref_83
        "501": *ref_84
      security: *ref_85
      summary: Обновление плэйлиста
      tags: *ref_86
    delete:
      operationId: playlist-delete
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_76
        "401": *ref_77
        "403": *ref_78
        "404": *ref_79
        "406": *ref_80
        "409": *ref_81
        "412": *ref_82
        "500": *ref_83
        "501": *ref_84
      security: *ref_85
      summary: Удаление плэйлиста
      tags: *ref_86
  /api/v2/statistics/device-status:
    post:
      operationId: device-status
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDeviceStatusRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": &ref_87
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_88
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_89
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_90
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_91
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_92
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_93
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_94
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_95
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_96
        - bearer: []
      summary: Отчёт по статусу устройства
      tags: &ref_97
        - statistics
  /api/v2/statistics/report-views:
    post:
      operationId: report-views
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportViewsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": *ref_87
        "401": *ref_88
        "403": *ref_89
        "404": *ref_90
        "406": *ref_91
        "409": *ref_92
        "412": *ref_93
        "500": *ref_94
        "501": *ref_95
      security: *ref_96
      summary: Отчёт по показам
      tags: *ref_97
  /api/v2/bid:
    post:
      operationId: bids-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BidsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidsGetResponse"
        "400": &ref_98
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_99
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_100
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_101
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_102
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_103
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_104
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_105
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_106
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_107
        - bearer: []
      summary: Получение списка заявок
      tags: &ref_108
        - bid
  /api/v2/bid/{bidId}:
    get:
      operationId: bid-get
      parameters:
        - name: bidId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidGetResponse"
        "400": *ref_98
        "401": *ref_99
        "403": *ref_100
        "404": *ref_101
        "406": *ref_102
        "409": *ref_103
        "412": *ref_104
        "500": *ref_105
        "501": *ref_106
      security: *ref_107
      summary: Получение заявки
      tags: *ref_108
    patch:
      operationId: bid-update
      parameters:
        - name: bidId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BidUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidGetResponse"
        "400": *ref_98
        "401": *ref_99
        "403": *ref_100
        "404": *ref_101
        "406": *ref_102
        "409": *ref_103
        "412": *ref_104
        "500": *ref_105
        "501": *ref_106
      security: *ref_107
      summary: Изменить заявку
      tags: *ref_108
    delete:
      operationId: bid-delete
      parameters:
        - name: bidId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_98
        "401": *ref_99
        "403": *ref_100
        "404": *ref_101
        "406": *ref_102
        "409": *ref_103
        "412": *ref_104
        "500": *ref_105
        "501": *ref_106
      security: *ref_107
      summary: Удаление заявки
      tags: *ref_108
  /api/v2/bid/precalc-promo:
    post:
      operationId: bid-precalc-promo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BidPrecalcPromoRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidPrecalcResponse"
        "400": *ref_98
        "401": *ref_99
        "403": *ref_100
        "404": *ref_101
        "406": *ref_102
        "409": *ref_103
        "412": *ref_104
        "500": *ref_105
        "501": *ref_106
      security: *ref_107
      summary: Возвращает предрасчет мониторов (для promo)
      tags: *ref_108
  /api/v2/bid/precalc-sum:
    post:
      operationId: bid-precalc-sum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BidPrecalcSumRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BidPrecalcResponse"
        "400": *ref_98
        "401": *ref_99
        "403": *ref_100
        "404": *ref_101
        "406": *ref_102
        "409": *ref_103
        "412": *ref_104
        "500": *ref_105
        "501": *ref_106
      security: *ref_107
      summary: Возвращает предрасчет мониторов (для суммы списания)
      tags: *ref_108
  /api/v2/crontab/create/users:
    post:
      operationId: crontab-create-users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrontabCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": &ref_109
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_110
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_111
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_112
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406": &ref_113
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409": &ref_114
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412": &ref_115
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_116
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501": &ref_117
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security: &ref_118
        - bearer: []
      summary: Включение CronTab для пользователей (только администратор)
      tags: &ref_119
        - crontab
  /api/v2/crontab/delete/users:
    post:
      operationId: crontab-delete-users
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_109
        "401": *ref_110
        "403": *ref_111
        "404": *ref_112
        "406": *ref_113
        "409": *ref_114
        "412": *ref_115
        "500": *ref_116
        "501": *ref_117
      security: *ref_118
      summary: Выключение CronTab для пользователей (только администратор)
      tags: *ref_119
  /api/v2/constants:
    get:
      operationId: constants-get
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConstantsGetResponse"
        "400":
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406":
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409":
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412":
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501":
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      summary: Получение списка констант
      tags:
        - constants
  /api/v2/wallet:
    post:
      operationId: wallet-operations-get
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WalletOperationsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletOperationsGetResponse"
        "400":
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "406":
          description: Не принято значение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableError"
        "409":
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "412":
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "501":
          description: Пока не реализовано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotImplementedError"
      security:
        - bearer: []
      summary: Получение списка операций
      tags:
        - wallet
info:
  title: MyScreen backend API
  description: MyScreen backend API
  version: 2.60.4
  contact:
    name: Stanislav V Lanskoy
    url: https://wisekaa.dev
    email: stanislav@wisekaa.dev
tags:
  - name: auth
    description: Аутентификация пользователя
    externalDocs:
      description: Аутентификация пользователя
      url: https://cp.dev.myscreen.ru/login
  - name: user
    description: Пользователи (только администратор)
    externalDocs:
      description: Пользователи
      url: https://cp.dev.myscreen.ru/users/list
  - name: folder
    description: Папки
    externalDocs:
      description: Библиотека
      url: https://cp.dev.myscreen.ru/library
  - name: file
    description: Файлы
    externalDocs:
      description: Библиотека
      url: https://cp.dev.myscreen.ru/library
  - name: playlist
    description: Плейлисты
    externalDocs:
      description: Плейлисты
      url: https://cp.dev.myscreen.ru/playlists/list
  - name: monitor
    description: Мониторы
    externalDocs:
      description: Мониторы
      url: https://cp.dev.myscreen.ru/monitors/list
  - name: editor
    description: Редакторы
    externalDocs:
      description: Видео-редактор
      url: https://cp.dev.myscreen.ru/editor/projects
  - name: bid
    description: Заявки
    externalDocs:
      description: Заявки
      url: https://cp.dev.myscreen.ru/bid
  - name: statistics
    description: Cтатистика
  - name: invoice
    description: Счета
    externalDocs:
      description: Счета
      url: https://cp.dev.myscreen.ru/accountant/invoices
  - name: crontab
    description: CronTab (только администратор)
  - name: constants
    description: Серверные заданные константы
  - name: wallet
    description: Кошелек, получение дебета/кредита
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Токен авторизации
      name: token
  schemas:
    BadRequestError:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        code:
          type: string
          example: server-error.10004
        message:
          type: string
          example: Bad request
      required:
        - statusCode
        - code
        - message
    UnauthorizedError:
      type: object
      properties:
        statusCode:
          type: number
          example: 401
        code:
          type: string
          example: server-error.10001
        message:
          type: string
          example: Unauthorized request
      required:
        - statusCode
        - code
        - message
    ForbiddenError:
      type: object
      properties:
        statusCode:
          type: number
          example: 403
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: Forbidden
      required:
        - statusCode
        - code
        - message
    NotFoundError:
      type: object
      properties:
        statusCode:
          type: number
          example: 404
        code:
          type: string
          example: server-error.10005
        message:
          type: string
          example: Not Found
      required:
        - statusCode
        - code
        - message
    NotAcceptableError:
      type: object
      properties:
        statusCode:
          type: number
          example: 406
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Not Acceptable
      required:
        - statusCode
        - code
        - message
    FileIDResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
      required:
        - id
        - name
    ConflictDataFile:
      type: object
      properties:
        id:
          type: string
          description: ID ссылки
          format: uuid
        name:
          type: string
          description: Имя ссылки
          example: Имя ссылки
        file:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileIDResponse"
    ConflictData:
      type: object
      properties:
        video:
          description: Редакторы (видео)
          type: array
          items:
            $ref: "#/components/schemas/ConflictDataFile"
        audio:
          description: Редакторы (аудио)
          type: array
          items:
            $ref: "#/components/schemas/ConflictDataFile"
        playlist:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/ConflictDataFile"
        monitor:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/ConflictDataFile"
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/ConflictDataFile"
    ConflictError:
      type: object
      properties:
        statusCode:
          type: number
          example: 409
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Conflict exists
        error:
          $ref: "#/components/schemas/ConflictData"
      required:
        - statusCode
        - code
        - message
        - error
    PreconditionFailedError:
      type: object
      properties:
        statusCode:
          type: number
          example: 412
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: User exists
      required:
        - statusCode
        - code
        - message
    InternalServerError:
      type: object
      properties:
        statusCode:
          type: number
          example: 500
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Server error
      required:
        - statusCode
        - code
        - message
    NotImplementedError:
      type: object
      properties:
        statusCode:
          type: number
          example: 501
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Server error
      required:
        - statusCode
        - code
        - message
    Status:
      type: string
      enum:
        - success
        - error
    UserRole:
      type: string
      enum:
        - monitor
        - monitor-owner
        - advertiser
        - administrator
        - accountant
    UserPlan:
      type: string
      enum:
        - DEMO
        - FULL
        - VIP
    UserWallet:
      type: object
      properties:
        total:
          type: number
          description: Баланс
          example: 0
    UserMetricsMonitors:
      type: object
      properties:
        online:
          type: number
          description: Кол-во устройств с заявками на трансляции
        offline:
          type: number
          description: Кол-во устройств с заявками, но выключенные
        empty:
          type: number
          description: Кол-во устройств без заявок
        user:
          type: number
          description: Кол-во моих мониторов
      required:
        - online
        - offline
        - empty
        - user
    UserMetricsStorage:
      type: object
      properties:
        storage:
          type: number
          description: Занятое место
        total:
          type: number
          description: Максимальное место
      required:
        - storage
        - total
    UserMetricsPlaylists:
      type: object
      properties:
        added:
          type: number
          description: Добавленные
        played:
          type: number
          description: Запущенные
      required:
        - added
        - played
    UserMetrics:
      type: object
      properties:
        monitors:
          description: Статистика мониторов
          allOf:
            - $ref: "#/components/schemas/UserMetricsMonitors"
        storageSpace:
          description: Дисковое пространство
          allOf:
            - $ref: "#/components/schemas/UserMetricsStorage"
        playlists:
          description: Плейлисты
          allOf:
            - $ref: "#/components/schemas/UserMetricsPlaylists"
      required:
        - monitors
        - storageSpace
        - playlists
    UserLastEntry:
      type: object
      properties:
        userAgent:
          type: string
          description: С какого устройства был выполнен последний вход
          example: >-
            Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like
            Gecko) Chrome/125.0.0.0 Safari/537.36
        at:
          type: string
          description: Когда был выполнен последний вход
          example: "2020-01-01T00:00:00"
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор пользователя
          format: uuid
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          maxLength: 50
          nullable: true
        name:
          type: string
          description: Имя
          maxLength: 50
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          maxLength: 50
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          maxLength: 14
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          maxLength: 100
        country:
          type: string
          description: Страна
          example: RU
          maxLength: 2
        preferredLanguage:
          type: string
          description: Предпочитаемый язык
          example: ru
          maxLength: 6
        locale:
          type: string
          description: Настройки даты
          example: ru_RU
          maxLength: 6
        storageSpace:
          type: string
          description: Дисковое пространство
          example: 20000000
        role:
          description: Роль пользователя
          example: advertiser
          allOf:
            - $ref: "#/components/schemas/UserRole"
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        plan:
          description: План пользователя
          example: FULL
          allOf:
            - $ref: "#/components/schemas/UserPlan"
        nonPayment:
          type: number
          description: Сколько раз отправлялось напоминание о неуплате
          example: 0
        company:
          type: string
          description: Компания
          example: ACME corporation
          maxLength: 100
          nullable: true
        companyLegalAddress:
          type: string
          description: Юридический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyActualAddress:
          type: string
          description: Фактический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyTIN:
          type: string
          description: Идентификационный номер налогоплательщика (ИНН)
          example: "012345678901"
          maxLength: 12
        companyRRC:
          type: string
          description: Код Причины Постановки на учет (КПП)
          example: "012345678"
          maxLength: 9
        companyPSRN:
          type: string
          description: Основной Государственный Регистрационный Номер (ОГРН)
          example: "012345678901234"
          maxLength: 15
        companyPhone:
          type: string
          description: Телефон организации
          example: "+78002000000"
          maxLength: 14
        companyEmail:
          type: string
          description: Email организации
          example: we@are.the.best
          maxLength: 254
        companyBank:
          type: string
          description: Наименование банка
          example: Банк
          maxLength: 254
        companyBIC:
          type: string
          description: Банковский идентификационный код (БИК)
          example: "012345678"
          maxLength: 9
        companyCorrespondentAccount:
          type: string
          description: Корреспондентский счет
          example: "30101810400000000000"
          maxLength: 20
        companyPaymentAccount:
          type: string
          description: Расчетный счет
          example: "40802810064580000000"
          maxLength: 20
        companyFax:
          type: string
          description: Факс организации
          example: "+78002000000"
          maxLength: 14
        companyRepresentative:
          type: string
          description: Представитель организации
          example: Тухбатуллина Юлия Евгеньевна
          maxLength: 254
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        planValidityPeriod:
          type: number
          description: Оставшийся срок оплаты
        wallet:
          description: Баланс
          allOf:
            - $ref: "#/components/schemas/UserWallet"
        metrics:
          description: Метрика
          allOf:
            - $ref: "#/components/schemas/UserMetrics"
        fullName:
          type: string
          description: Полное имя
        fullNameEmail:
          type: string
          description: Полное имя и email
        lastEntry:
          description: Последний вход
          allOf:
            - $ref: "#/components/schemas/UserLastEntry"
      required:
        - id
        - email
        - role
        - nonPayment
    UserGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - data
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          maxLength: 50
          nullable: true
        name:
          type: string
          description: Имя
          maxLength: 50
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          maxLength: 50
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          maxLength: 14
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          maxLength: 100
        country:
          type: string
          description: Страна
          example: RU
          maxLength: 2
        preferredLanguage:
          type: string
          description: Предпочитаемый язык
          example: ru
          maxLength: 6
        locale:
          type: string
          description: Настройки даты
          example: ru_RU
          maxLength: 6
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        company:
          type: string
          description: Компания
          example: ACME corporation
          maxLength: 100
          nullable: true
        companyLegalAddress:
          type: string
          description: Юридический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyActualAddress:
          type: string
          description: Фактический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyTIN:
          type: string
          description: Идентификационный номер налогоплательщика (ИНН)
          example: "012345678901"
          maxLength: 12
        companyRRC:
          type: string
          description: Код Причины Постановки на учет (КПП)
          example: "012345678"
          maxLength: 9
        companyPSRN:
          type: string
          description: Основной Государственный Регистрационный Номер (ОГРН)
          example: "012345678901234"
          maxLength: 15
        companyPhone:
          type: string
          description: Телефон организации
          example: "+78002000000"
          maxLength: 14
        companyEmail:
          type: string
          description: Email организации
          example: we@are.the.best
          maxLength: 254
        companyBank:
          type: string
          description: Наименование банка
          example: Банк
          maxLength: 254
        companyBIC:
          type: string
          description: Банковский идентификационный код (БИК)
          example: "012345678"
          maxLength: 9
        companyCorrespondentAccount:
          type: string
          description: Корреспондентский счет
          example: "30101810400000000000"
          maxLength: 20
        companyPaymentAccount:
          type: string
          description: Расчетный счет
          example: "40802810064580000000"
          maxLength: 20
        companyFax:
          type: string
          description: Факс организации
          example: "+78002000000"
          maxLength: 14
        companyRepresentative:
          type: string
          description: Представитель организации
          example: Тухбатуллина Юлия Евгеньевна
          maxLength: 254
        role:
          description: Роль пользователя
          example: advertiser
          allOf:
            - $ref: "#/components/schemas/UserRole"
        plan:
          description: План пользователя
          example: FULL
          allOf:
            - $ref: "#/components/schemas/UserPlan"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          format: password
          pattern: |-
            /((?=.*\d)|(?=.*\W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
      required:
        - email
        - password
    AuthenticationPayload:
      type: object
      properties:
        type:
          type: string
          description: "Тип: Bearer"
          example: bearer
        token:
          type: string
          description: "Токен, используемый в Authorization: Bearer"
          example: eyJcbGciOcJIUcI1xxxxxxxxxxxxxxxx
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - type
        - token
        - refreshToken
    AuthResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - payload
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          maxLength: 50
          nullable: true
        name:
          type: string
          description: Имя
          maxLength: 50
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          maxLength: 50
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          maxLength: 14
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          maxLength: 100
        country:
          type: string
          description: Страна
          example: RU
          maxLength: 2
        preferredLanguage:
          type: string
          description: Предпочитаемый язык
          example: ru
          maxLength: 6
        role:
          description: Роль пользователя
          example: advertiser
          allOf:
            - $ref: "#/components/schemas/UserRole"
        company:
          type: string
          description: Компания
          example: ACME corporation
          maxLength: 100
          nullable: true
        companyLegalAddress:
          type: string
          description: Юридический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyActualAddress:
          type: string
          description: Фактический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyTIN:
          type: string
          description: Идентификационный номер налогоплательщика (ИНН)
          example: "012345678901"
          maxLength: 12
        companyRRC:
          type: string
          description: Код Причины Постановки на учет (КПП)
          example: "012345678"
          maxLength: 9
        companyPSRN:
          type: string
          description: Основной Государственный Регистрационный Номер (ОГРН)
          example: "012345678901234"
          maxLength: 15
        companyPhone:
          type: string
          description: Телефон организации
          example: "+78002000000"
          maxLength: 14
        companyEmail:
          type: string
          description: Email организации
          example: we@are.the.best
          maxLength: 254
        companyBank:
          type: string
          description: Наименование банка
          example: Банк
          maxLength: 254
        companyBIC:
          type: string
          description: Банковский идентификационный код (БИК)
          example: "012345678"
          maxLength: 9
        companyCorrespondentAccount:
          type: string
          description: Корреспондентский счет
          example: "30101810400000000000"
          maxLength: 20
        companyPaymentAccount:
          type: string
          description: Расчетный счет
          example: "40802810064580000000"
          maxLength: 20
        companyFax:
          type: string
          description: Факс организации
          example: "+78002000000"
          maxLength: 14
        companyRepresentative:
          type: string
          description: Представитель организации
          example: Тухбатуллина Юлия Евгеньевна
          maxLength: 254
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 32
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
      required:
        - role
        - password
    AuthRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - refreshToken
    AuthRefreshResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
      required:
        - status
        - payload
    VerifyEmailRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
      required:
        - verify
    SuccessResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
      required:
        - status
    ResetPasswordInvitationRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
      required:
        - email
    ResetPasswordVerifyRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
        password:
          type: string
          example: Secret~12345678
      required:
        - verify
        - password
    AuthMonitorRequest:
      type: object
      properties:
        code:
          type: string
          description: Используется для обозначения монитора
          pattern: ^[0-9]{3}-[0-9]{3}-[0-9]{3}$
          example: 123-456-789
      required:
        - code
    Address:
      type: object
      properties:
        country:
          type: string
          description: Страна
          example: Россия
        city:
          type: string
          description: Город
          example: Краснодар
        street:
          type: string
          description: Улица
          example: Красная
        house:
          type: string
          description: Дом
          example: "1"
        room:
          type: string
          description: Комната
          example: "1"
    MonitorCategory:
      type: string
      enum:
        - FOOD
        - CAFES_AND_RESTAURANTS
        - PHARMACY
        - ATM
        - HOTEL
        - AUTO_REPAIR
        - CAR_WASHING
        - HOSPITALS
        - CINEMAS
        - MALL
        - SAUNAS
        - BEAUTY_SALONS
        - GAS_STATION
    MonitorOrientation:
      type: string
      enum:
        - Horizontal
        - Vertical
    MonitorStatus:
      type: string
      enum:
        - offline
        - online
    MonitorMultiple:
      type: string
      enum:
        - SINGLE
        - SUBORDINATE
        - SCALING
        - MIRROR
    PointClass:
      type: object
      properties:
        type:
          type: string
          description: Point
          example: Point
        coordinates:
          description: "[ Долгота, Широта ]"
          example:
            - 38.97603
            - 45.04484
          type: array
          items:
            type: number
      required:
        - type
        - coordinates
    MonitorRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: &ref_120
            city: Krasnodar
            country: Russia
            street: Krasnaya
            house: "122"
            room: "1"
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          allOf:
            - $ref: "#/components/schemas/MonitorCategory"
        orientation:
          description: Ориентация экрана
          example: Horizontal
          allOf:
            - $ref: "#/components/schemas/MonitorOrientation"
        model:
          type: string
          description: Модель
          example: Samsung
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 100
        width:
          type: integer
          description: Ширина
          example: 1920
        height:
          type: integer
          description: Высота
          example: 1080
        attached:
          type: boolean
          description: Присоединен
          example: false
        sound:
          type: boolean
          description: "Есть звук: true/false"
          example: true
        status:
          description: Подключен
          example: offline
          allOf:
            - $ref: "#/components/schemas/MonitorStatus"
        groupOnlineMonitors:
          type: number
          description: Количество подключенных мониторов в группе
          example: 0
        multiple:
          default: SINGLE
          description: >-
            Обычный монитор, много мониторов с режимом масштабирования или
            зеркалирования
          example: SINGLE
          allOf:
            - $ref: "#/components/schemas/MonitorMultiple"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
          nullable: true
        location:
          example: &ref_121
            type: Point
            coordinates:
              - 38.97603
              - 45.04484
          allOf:
            - $ref: "#/components/schemas/PointClass"
        favorite:
          type: boolean
          description: Избранный монитор
          example: false
        price1s:
          description: Стоимость показа 1 секунды в рублях
          oneOf:
            - type: integer
            - type: array
              items:
                type: integer
          examples:
            one: 1
            range:
              - 1
              - 2
        minWarranty:
          description: Гарантированное минимальное количество показов в день
          oneOf:
            - type: integer
            - type: array
              items:
                type: integer
          examples:
            one: 1
            range:
              - 1
              - 2
        maxDuration:
          description: Максимальная длительность плэйлиста в секундах
          oneOf:
            - type: integer
            - type: array
              items:
                type: integer
          examples:
            one: 1
            range:
              - 1
              - 2
        dateWhenApp:
          description: Время начала проигрывания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    Order:
      type: string
      enum:
        - ASC
        - DESC
    LimitOrderRequest:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Order"
        name:
          allOf:
            - $ref: "#/components/schemas/Order"
        description:
          allOf:
            - $ref: "#/components/schemas/Order"
        extension:
          allOf:
            - $ref: "#/components/schemas/Order"
        width:
          allOf:
            - $ref: "#/components/schemas/Order"
        height:
          allOf:
            - $ref: "#/components/schemas/Order"
        folder:
          allOf:
            - $ref: "#/components/schemas/Order"
        folderId:
          allOf:
            - $ref: "#/components/schemas/Order"
        monitor:
          allOf:
            - $ref: "#/components/schemas/Order"
        monitorId:
          allOf:
            - $ref: "#/components/schemas/Order"
        videoType:
          allOf:
            - $ref: "#/components/schemas/Order"
        type:
          allOf:
            - $ref: "#/components/schemas/Order"
        filesize:
          allOf:
            - $ref: "#/components/schemas/Order"
        category:
          allOf:
            - $ref: "#/components/schemas/Order"
        duration:
          allOf:
            - $ref: "#/components/schemas/Order"
        files:
          allOf:
            - $ref: "#/components/schemas/Order"
        monitors:
          allOf:
            - $ref: "#/components/schemas/Order"
        playlists:
          allOf:
            - $ref: "#/components/schemas/Order"
        parentFolder:
          allOf:
            - $ref: "#/components/schemas/Order"
        parentFolderId:
          allOf:
            - $ref: "#/components/schemas/Order"
        email:
          allOf:
            - $ref: "#/components/schemas/Order"
        surname:
          allOf:
            - $ref: "#/components/schemas/Order"
        middleName:
          allOf:
            - $ref: "#/components/schemas/Order"
        phoneNumber:
          allOf:
            - $ref: "#/components/schemas/Order"
        city:
          allOf:
            - $ref: "#/components/schemas/Order"
        country:
          allOf:
            - $ref: "#/components/schemas/Order"
        company:
          allOf:
            - $ref: "#/components/schemas/Order"
        role:
          allOf:
            - $ref: "#/components/schemas/Order"
        verified:
          allOf:
            - $ref: "#/components/schemas/Order"
        isDemoUser:
          allOf:
            - $ref: "#/components/schemas/Order"
        countUsedSpace:
          allOf:
            - $ref: "#/components/schemas/Order"
        address:
          allOf:
            - $ref: "#/components/schemas/Order"
        price:
          allOf:
            - $ref: "#/components/schemas/Order"
        orientation:
          allOf:
            - $ref: "#/components/schemas/Order"
        monitorInfo:
          allOf:
            - $ref: "#/components/schemas/Order"
        attached:
          allOf:
            - $ref: "#/components/schemas/Order"
        code:
          allOf:
            - $ref: "#/components/schemas/Order"
        status:
          allOf:
            - $ref: "#/components/schemas/Order"
        longitude:
          allOf:
            - $ref: "#/components/schemas/Order"
        latitude:
          allOf:
            - $ref: "#/components/schemas/Order"
        renderingStatus:
          allOf:
            - $ref: "#/components/schemas/Order"
        fps:
          allOf:
            - $ref: "#/components/schemas/Order"
        renderingPercent:
          allOf:
            - $ref: "#/components/schemas/Order"
        renderingError:
          allOf:
            - $ref: "#/components/schemas/Order"
        renderedFile:
          allOf:
            - $ref: "#/components/schemas/Order"
        renderedFileId:
          allOf:
            - $ref: "#/components/schemas/Order"
        keepSourceAudio:
          allOf:
            - $ref: "#/components/schemas/Order"
        totalDuration:
          allOf:
            - $ref: "#/components/schemas/Order"
        videoLayers:
          allOf:
            - $ref: "#/components/schemas/Order"
        audioLayers:
          allOf:
            - $ref: "#/components/schemas/Order"
        createdAt:
          allOf:
            - $ref: "#/components/schemas/Order"
        updatedAt:
          allOf:
            - $ref: "#/components/schemas/Order"
        seller:
          allOf:
            - $ref: "#/components/schemas/Order"
        buyer:
          allOf:
            - $ref: "#/components/schemas/Order"
        playlist:
          allOf:
            - $ref: "#/components/schemas/Order"
        favorite:
          allOf:
            - $ref: "#/components/schemas/Order"
    LimitRequest:
      type: object
      properties:
        limit:
          type: number
          description: Лимит строк результатов
          example: 20
        page:
          type: number
          description: Страница результатов
          example: 1
        order:
          description: Порядок результатов
          example:
            createdAt: DESC
          allOf:
            - $ref: "#/components/schemas/LimitOrderRequest"
    MonitorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/MonitorRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - address
              - category
              - price1s
              - minWarranty
              - maxDuration
              - orientation
              - model
              - angle
              - matrix
              - brightness
              - width
              - height
              - attached
              - sound
              - status
              - groupOnlineMonitors
              - multiple
              - playlistPlayed
              - code
              - lastSeen
              - location
              - favorite
              - userId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    MonitorGroup:
      type: object
      properties:
        monitorId:
          type: string
          format: uuid
          description: Подчиненный монитор в группе мониторов
        row:
          type: number
          description: Подчиненный номер монитора в группе мониторов (строка)
        col:
          type: number
          description: Подчиненный номер монитора в группе мониторов (колонка)
      required:
        - monitorId
        - row
        - col
    PlaylistStatus:
      type: string
      enum:
        - Offline
        - Broadcast
        - NoBroadcast
    FileType:
      type: string
      enum:
        - video
        - image
        - audio
        - other
    FolderResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
          minLength: 1
          maxLength: 100
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        parentFolderId:
          type: string
          description: Родительская папка ID
          format: uuid
          nullable: true
        system:
          type: boolean
          description: Системная папка
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        empty:
          type: boolean
          description: Подчиненные в этой папке
          example: true
      required:
        - id
        - name
        - userId
        - system
    FileResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
        extension:
          type: string
          description: Расширение файла
          example: mp4
        hash:
          type: string
          description: Hash файла
          example: 2b0439011a3a215ae1756bfc342e5bbc
        type:
          description: Тип файла
          example: video
          allOf:
            - $ref: "#/components/schemas/FileType"
        filesize:
          type: number
          description: Размер файла
          example: 210000
        duration:
          type: number
          description: Продолжительность видео
          example: 10
        width:
          type: number
          description: Размер по горизонтали
          example: 1024
        height:
          type: number
          description: Размер по вертикали
          example: 1024
        info:
          type: object
          description: Параметры видео, картинки или аудио, используется FfprobeData
          example: >-
            { format: { size: "100000", filename: "foo.mp4" }, streams: [{
            codec_name: "h264", width: 1024, height: 1024 }] }
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        signedUrl:
          type: string
          description: Подписанный URL на файл
          example: https://storage.yandex.ru/file.mp4
        used:
          type: boolean
          description: Используется
        folder:
          description: Папка
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
      required:
        - id
        - folderId
        - name
        - extension
        - hash
        - type
        - filesize
        - duration
        - width
        - height
        - userId
        - signedUrl
        - folder
    PlaylistResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плейлиста
          example: описание плейлиста
          nullable: true
        status:
          description: Статус
          example: Offline
          allOf:
            - $ref: "#/components/schemas/PlaylistStatus"
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        hide:
          type: boolean
          description: Скрытый
          default: false
          example: false
        parentPlaylist:
          description: Родительский плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        editors:
          type: array
          description: Подчиненные редакторы
          items:
            $ref: "#/components/schemas/EditorResponse"
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        monitors:
          type: array
          description: Мониторы
          items:
            $ref: "#/components/schemas/MonitorResponse"
        files:
          description: Файлы
          items:
            $ref: "#/components/schemas/FileResponse"
          type: array
      required:
        - id
        - name
        - status
        - userId
        - parentPlaylist
        - monitors
        - files
    MonitorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_120
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          allOf:
            - $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: number
          description: Стоимость показа 1 секунды в рублях
          example: 1
          default: "0"
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          allOf:
            - $ref: "#/components/schemas/MonitorOrientation"
        model:
          type: string
          description: Модель
          example: Samsung
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 100
        width:
          type: integer
          description: Ширина
          example: 1920
        height:
          type: integer
          description: Высота
          example: 1080
        attached:
          type: boolean
          description: Присоединен
          example: false
        sound:
          type: boolean
          description: "Есть звук: true/false"
          example: true
        status:
          description: Подключен
          example: offline
          allOf:
            - $ref: "#/components/schemas/MonitorStatus"
        groupOnlineMonitors:
          type: number
          description: Количество подключенных мониторов в группе
          example: 0
        multiple:
          default: SINGLE
          description: >-
            Обычный монитор, много мониторов с режимом масштабирования или
            зеркалирования
          example: SINGLE
          allOf:
            - $ref: "#/components/schemas/MonitorMultiple"
        groupIds:
          description: Подчиненные мониторы в группе мониторов
          type: array
          items:
            $ref: "#/components/schemas/MonitorGroup"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        lastSeen:
          type: string
          format: date-time
          description: Последний раз виден
          example: "2021-10-01T10:00:00.147Z"
          nullable: true
        location:
          example: *ref_121
          allOf:
            - $ref: "#/components/schemas/PointClass"
        favorite:
          type: boolean
          description: Избранный монитор
          example: false
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        playlist:
          description: Плэйлист привязанный к монитору
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        files:
          description: Фото монитора. Документы на право владения.
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
      required:
        - id
        - name
        - category
        - width
        - height
        - attached
        - sound
        - status
        - playlistPlayed
        - favorite
        - userId
        - code
    MonitorsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество мониторов
        data:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/MonitorResponse"
      required:
        - status
        - count
        - data
    MonitorCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_120
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          allOf:
            - $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: number
          description: Стоимость показа 1 секунды в рублях
          example: 1
          default: "0"
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          allOf:
            - $ref: "#/components/schemas/MonitorOrientation"
        model:
          type: string
          description: Модель
          example: Samsung
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 100
        width:
          type: integer
          description: Ширина
          example: 1920
          default: 1920
        height:
          type: integer
          description: Высота
          example: 1080
          default: 1080
        sound:
          type: boolean
          description: "Есть звук: true/false"
          example: true
        multiple:
          default: SINGLE
          description: >-
            Обычный монитор, много мониторов с режимом масштабирования или
            зеркалирования
          example: SINGLE
          allOf:
            - $ref: "#/components/schemas/MonitorMultiple"
        groupIds:
          description: Подчиненные мониторы в группе мониторов
          type: array
          items:
            $ref: "#/components/schemas/MonitorGroup"
        location:
          example: *ref_121
          allOf:
            - $ref: "#/components/schemas/PointClass"
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
      required:
        - name
        - category
        - sound
    MonitorGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorResponse"
      required:
        - status
        - data
    BidCreateMonitorRequest:
      type: object
      properties:
        dateWhen:
          type: string
          format: date
          description: Время когда
          example: "2021-01-01"
        dateBefore:
          type: string
          format: date
          description: Время до
          example: "2021-10-01"
          nullable: true
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
      required:
        - dateWhen
        - playlistChange
    MonitorsPlaylistAttachRequest:
      type: object
      properties:
        playlistId:
          type: string
          description: Плэйлист
          format: uuid
        monitorIds:
          description: Мониторы
          type: array
          items:
            type: string
            format: uuid
        bid:
          description: Создание заявки
          allOf:
            - $ref: "#/components/schemas/BidCreateMonitorRequest"
      required:
        - playlistId
        - monitorIds
        - bid
    BidStatus:
      type: string
      enum:
        - OK
        - WAITING
    BidApprove:
      type: string
      enum:
        - NotProcessed
        - Allowed
        - Denied
    BidResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор взаимодействия
          format: uuid
        seqNo:
          type: number
          description: Номер заявки
        buyer:
          description: Покупатель
          allOf:
            - $ref: "#/components/schemas/UserResponse"
        seller:
          description: Продавец
          allOf:
            - $ref: "#/components/schemas/UserResponse"
        monitor:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorResponse"
        status:
          description: OK / Подождите
          example: OK
          default: OK
          allOf:
            - $ref: "#/components/schemas/BidStatus"
        hide:
          type: boolean
          description: Скрытый
          default: false
          example: false
        playlist:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        approved:
          description: Не обработан / Разрешен / Запрещен
          example: NotProcessed
          allOf:
            - $ref: "#/components/schemas/BidApprove"
        dateWhen:
          type: string
          format: date
          description: Время когда
          example: "2021-01-01"
        dateBefore:
          type: string
          format: date
          description: Время до
          example: "2021-10-01"
          nullable: true
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
        sum:
          type: number
          description: Сумма списания
          example: 10
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
      required:
        - id
        - seqNo
        - buyer
        - seller
        - monitor
        - playlist
        - approved
        - dateWhen
        - playlistChange
        - sum
        - userId
    BidsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество взаимодействий
        data:
          description: Взаимодействия покупателей и продавца
          type: array
          items:
            $ref: "#/components/schemas/BidResponse"
      required:
        - status
        - count
        - data
    MonitorUpdateRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_120
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          allOf:
            - $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: number
          description: Стоимость показа 1 секунды в рублях
          example: 1
          default: "0"
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          allOf:
            - $ref: "#/components/schemas/MonitorOrientation"
        model:
          type: string
          description: Модель
          example: Samsung
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 100
        width:
          type: integer
          description: Ширина
          example: 1920
        height:
          type: integer
          description: Высота
          example: 1080
        attached:
          type: boolean
          description: Присоединен
          example: false
        sound:
          type: boolean
          description: "Есть звук: true/false"
          example: true
        status:
          description: Подключен
          example: offline
          allOf:
            - $ref: "#/components/schemas/MonitorStatus"
        multiple:
          default: SINGLE
          description: >-
            Обычный монитор, много мониторов с режимом масштабирования или
            зеркалирования
          example: SINGLE
          allOf:
            - $ref: "#/components/schemas/MonitorMultiple"
        groupIds:
          description: Подчиненные мониторы в группе мониторов
          type: array
          items:
            $ref: "#/components/schemas/MonitorGroup"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
          nullable: true
        location:
          example: *ref_121
          allOf:
            - $ref: "#/components/schemas/PointClass"
    RenderingStatus:
      type: string
      enum:
        - initial
        - ready
        - pending
        - error
    EditorRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        renderingStatus:
          description: Статус рендеринга
          example: initial
          allOf:
            - $ref: "#/components/schemas/RenderingStatus"
        cropX:
          type: number
          description: Обрезать слева
        cropY:
          type: number
          description: Обрезать сверху
        cropW:
          type: number
          description: Ширина обрезки
        cropH:
          type: number
          description: Высота обрезки
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    EditorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/EditorRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - width
              - height
              - fps
              - renderingStatus
              - renderingPercent
              - renderingError
              - renderedFile
              - keepSourceAudio
              - totalDuration
              - cropX
              - cropY
              - cropW
              - cropH
              - videoLayers
              - audioLayers
              - userId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    EditorLayerResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор слоя
          example: "12345678"
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        file:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - index
        - duration
        - cutFrom
        - cutTo
        - start
        - mixVolume
        - file
    EditorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        renderingStatus:
          description: Статус рендеринга
          example: initial
          allOf:
            - $ref: "#/components/schemas/RenderingStatus"
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
          nullable: true
        renderingError:
          type: string
          description: Ошибка рендеринга
          nullable: true
        renderedFile:
          description: Обработанный файл
          nullable: true
          allOf: &ref_122
            - $ref: "#/components/schemas/FileResponse"
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
        totalDuration:
          type: number
          description: Общее время
          example: 0
        cropX:
          type: number
          description: Обрезать слева
        cropY:
          type: number
          description: Обрезать сверху
        cropW:
          type: number
          description: Ширина обрезки
        cropH:
          type: number
          description: Высота обрезки
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        videoLayers:
          description: Видео слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
        audioLayers:
          description: Аудио слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - id
        - name
        - width
        - height
        - fps
        - renderingStatus
        - renderingPercent
        - renderingError
        - keepSourceAudio
        - totalDuration
        - userId
        - videoLayers
        - audioLayers
    EditorsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество редакторов
        data:
          description: Оплаты
          type: array
          items:
            $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - count
        - data
    EditorCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
        cropX:
          type: number
          description: Обрезать слева
        cropY:
          type: number
          description: Обрезать сверху
        cropW:
          type: number
          description: Ширина обрезки
        cropH:
          type: number
          description: Высота обрезки
      required:
        - name
        - width
        - height
        - fps
        - keepSourceAudio
    EditorGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - data
    EditorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
        cropX:
          type: number
          description: Обрезать слева
        cropY:
          type: number
          description: Обрезать сверху
        cropW:
          type: number
          description: Ширина обрезки
        cropH:
          type: number
          description: Высота обрезки
    EditorLayerCreateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        file:
          type: string
          description: Файл
          format: uuid
      required:
        - file
    EditorLayerGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Слой редактора
          allOf:
            - $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - status
        - data
    EditorLayerUpdateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
    EditorRenderingStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        renderingStatus:
          description: Статус рендеринга
          example: initial
          allOf:
            - $ref: "#/components/schemas/RenderingStatus"
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
          nullable: true
        renderingError:
          type: string
          description: Ошибка рендеринга
          nullable: true
        renderedFile:
          description: Обработанный файл
          nullable: true
          allOf: *ref_122
      required:
        - id
        - renderingStatus
        - renderingPercent
        - renderingError
    EditorGetRenderingStatusResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorRenderingStatusResponse"
      required:
        - status
        - data
    EditorExportRequest:
      type: object
      properties:
        rerender:
          type: boolean
          description: Перезапустить рендеринг
          default: false
          example: false
    FileRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        type:
          description: Тип файла
          example: video
          allOf:
            - $ref: "#/components/schemas/FileType"
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
      required:
        - folderId
    FilesGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FileRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - folderId
              - name
              - extension
              - hash
              - type
              - filesize
              - duration
              - width
              - height
              - info
              - userId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    FilesGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FilesUploadResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FileUpdatesRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
      required:
        - id
    FilesUpdateRequest:
      type: object
      properties:
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileUpdatesRequest"
      required:
        - files
    FileGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - data
    FileIdRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
      required:
        - id
    FilesCopyRequest:
      type: object
      properties:
        toFolder:
          type: string
          description: Папка, куда копировать
          format: uuid
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileIdRequest"
      required:
        - toFolder
        - files
    FileUpdateRequest:
      type: object
      properties:
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
    FilesDeleteRequest:
      type: object
      properties:
        filesId:
          description: Файлы для удаления
          type: array
          items:
            type: string
            format: uuid
      required:
        - filesId
    FolderRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
          minLength: 1
          maxLength: 100
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
          nullable: true
        userId:
          type: string
          description: Пользователь ID
          format: uuid
        createdAt:
          description: Время создания
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          type: array
          items:
            oneOf:
              - type: string
                format: date-time
              - type: array
                items:
                  type: string
                  format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    FoldersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FolderRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - userId
              - parentFolderId
              - system
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    FoldersGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество папок
          example: 1
        data:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - count
        - data
    FolderCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
          minLength: 1
          maxLength: 100
        parentFolderId:
          type: string
          description: Родительская папка ID
          format: uuid
          nullable: true
      required:
        - name
    FolderGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Папки
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - data
    FolderUpdateRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
      required:
        - id
    FoldersUpdateRequest:
      type: object
      properties:
        folders:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderUpdateRequest"
      required:
        - folders
    FolderCopyRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
      required:
        - id
    FoldersCopyRequest:
      type: object
      properties:
        toFolder:
          type: string
          description: Папка, куда копировать
          format: uuid
        folders:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderCopyRequest"
      required:
        - toFolder
        - folders
    FoldersDeleteRequest:
      type: object
      properties:
        foldersId:
          description: Папки для удаления
          type: array
          items:
            type: string
            format: uuid
      required:
        - foldersId
    FolderIdUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
    UserRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор пользователя
          format: uuid
        email:
          type: string
          description: EMail пользователя
          format: email
          minLength: 6
          maxLength: 254
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          maxLength: 50
          nullable: true
        name:
          type: string
          description: Имя
          maxLength: 50
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          maxLength: 50
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          maxLength: 14
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          maxLength: 100
        country:
          type: string
          description: Страна
          example: RU
          maxLength: 2
        preferredLanguage:
          type: string
          description: Предпочитаемый язык
          example: ru
          maxLength: 6
        locale:
          type: string
          description: Настройки даты
          example: ru_RU
          maxLength: 6
        storageSpace:
          type: string
          description: Дисковое пространство
          example: 20000000
        role:
          description: Роль пользователя
          example: advertiser
          allOf:
            - $ref: "#/components/schemas/UserRole"
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        plan:
          description: План пользователя
          example: FULL
          allOf:
            - $ref: "#/components/schemas/UserPlan"
        nonPayment:
          type: number
          description: Сколько раз отправлялось напоминание о неуплате
          example: 0
        company:
          type: string
          description: Компания
          example: ACME corporation
          maxLength: 100
          nullable: true
        companyLegalAddress:
          type: string
          description: Юридический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyActualAddress:
          type: string
          description: Фактический адрес
          example: г. Краснодар, ул. Красная, д. 1
          maxLength: 254
        companyTIN:
          type: string
          description: Идентификационный номер налогоплательщика (ИНН)
          example: "012345678901"
          maxLength: 12
        companyRRC:
          type: string
          description: Код Причины Постановки на учет (КПП)
          example: "012345678"
          maxLength: 9
        companyPSRN:
          type: string
          description: Основной Государственный Регистрационный Номер (ОГРН)
          example: "012345678901234"
          maxLength: 15
        companyPhone:
          type: string
          description: Телефон организации
          example: "+78002000000"
          maxLength: 14
        companyEmail:
          type: string
          description: Email организации
          example: we@are.the.best
          maxLength: 254
        companyBank:
          type: string
          description: Наименование банка
          example: Банк
          maxLength: 254
        companyBIC:
          type: string
          description: Банковский идентификационный код (БИК)
          example: "012345678"
          maxLength: 9
        companyCorrespondentAccount:
          type: string
          description: Корреспондентский счет
          example: "30101810400000000000"
          maxLength: 20
        companyPaymentAccount:
          type: string
          description: Расчетный счет
          example: "40802810064580000000"
          maxLength: 20
        companyFax:
          type: string
          description: Факс организации
          example: "+78002000000"
          maxLength: 14
        companyRepresentative:
          type: string
          description: Представитель организации
          example: Тухбатуллина Юлия Евгеньевна
          maxLength: 254
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    UsersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/UserRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - email
              - surname
              - name
              - middleName
              - phoneNumber
              - city
              - country
              - preferredLanguage
              - locale
              - storageSpace
              - role
              - verified
              - plan
              - nonPayment
              - company
              - companyLegalAddress
              - companyActualAddress
              - companyTIN
              - companyRRC
              - companyPSRN
              - companyPhone
              - companyEmail
              - companyBank
              - companyBIC
              - companyCorrespondentAccount
              - companyPaymentAccount
              - companyFax
              - companyRepresentative
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    UsersGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество пользователей
        data:
          description: Пользователи
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - count
        - data
    InvoiceStatus:
      type: string
      enum:
        - AWAITING_CONFIRMATION
        - CONFIRMED_PENDING_PAYMENT
        - PAID
        - CANCELLED
    InvoiceRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор счёта
          format: uuid
        seqNo:
          type: number
          description: Номер счета
        description:
          type: string
          description: Описание заказа
          example: описание заказа
        sum:
          description: Сумма счета
          oneOf:
            - type: number
            - type: array
              items:
                type: number
          examples:
            one: 1000
            range:
              - 1000
              - 2000
        status:
          type: array
          description: Подтверждение/отклонение счёта
          example:
            range:
              - AWAITING_CONFIRMATION
              - CANCELLED
          items:
            $ref: "#/components/schemas/InvoiceStatus"
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    InvoicesGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/InvoiceRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - seqNo
              - description
              - status
              - sum
              - file
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    InvoiceResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор счёта
          format: uuid
        seqNo:
          type: number
          description: Номер счета
        description:
          type: string
          description: Описание заказа
          example: описание заказа
        status:
          description: Подтверждение/отклонение счёта
          example: AWAITING_CONFIRMATION
          allOf:
            - $ref: "#/components/schemas/InvoiceStatus"
        sum:
          type: number
          description: Сумма счета
          example: 1000
        file:
          description: Файл
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FileResponse"
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
      required:
        - id
        - seqNo
        - description
        - status
        - sum
        - file
    InvoicesGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество заказов
        data:
          description: Заказы
          type: array
          items:
            $ref: "#/components/schemas/InvoiceResponse"
      required:
        - status
        - count
        - data
    InvoiceCreateRequest:
      type: object
      properties:
        sum:
          type: number
          description: Сумма счета
          example: 1000
        description:
          type: string
          description: Описание заказа
          example: описание заказа
      required:
        - sum
    InvoiceGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Счёт
          allOf:
            - $ref: "#/components/schemas/InvoiceResponse"
      required:
        - status
        - data
    PlaylistRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плейлиста
          example: описание плейлиста
          nullable: true
        status:
          type: array
          description: Статус
          example:
            range:
              - Offline
              - Broadcast
          items:
            $ref: "#/components/schemas/PlaylistStatus"
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    PlaylistsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/PlaylistRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - description
              - status
              - userId
              - hide
              - parentPlaylist
              - files
              - monitors
              - editors
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    PlaylistsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество плэйлистов
        data:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - count
        - data
    PlaylistCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плейлиста
          example: описание плейлиста
          nullable: true
        files:
          description: Файлы
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - files
    PlaylistGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - data
    PlaylistUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плейлиста
          example: описание плейлиста
          nullable: true
        files:
          description: Файлы
          example:
            - 1234-5678-9123-4567
            - 7654-3219-8765-4321
          type: array
          items:
            type: string
            format: uuid
    SpecificFormat:
      type: string
      enum:
        - xlsx
        - pdf
    ReportDeviceStatusRequest:
      type: object
      properties:
        format:
          description: Формат получаемого файла
          example: xlsx
          allOf:
            - $ref: "#/components/schemas/SpecificFormat"
        monitorIds:
          description: Мониторы ID (если не указан, то все мониторы)
          example:
            - 1234-5678-9123-4567
            - 7654-3219-8765-4321
          type: array
          items:
            type: string
            format: uuid
        dateFrom:
          type: string
          description: Начальная дата
          example: "2021-01-01"
          format: date
        dateTo:
          type: string
          description: Конечная дата
          example: "2021-01-01"
          format: date
      required:
        - format
        - dateFrom
        - dateTo
    ReportViewsRequest:
      type: object
      properties:
        format:
          description: Формат получаемого файла
          example: xlsx
          allOf:
            - $ref: "#/components/schemas/SpecificFormat"
        monitorIds:
          description: Мониторы ID (если не указан, то все мониторы)
          example:
            - 1234-5678-9123-4567
            - 7654-3219-8765-4321
          type: array
          items:
            type: string
            format: uuid
        dateFrom:
          type: string
          description: Начальная дата
          example: "2021-01-01"
          format: date
        dateTo:
          type: string
          description: Конечная дата
          example: "2021-01-01"
          format: date
      required:
        - format
        - dateFrom
        - dateTo
    BidRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор взаимодействия
          format: uuid
        seqNo:
          type: number
          description: Номер заявки
        buyerId:
          type: object
          description: Покупатель ID
          format: uuid
          nullable: true
        sellerId:
          type: string
          description: Продавец ID
          format: uuid
        monitorId:
          type: string
          description: Монитор ID
          format: uuid
        hide:
          type: boolean
          description: Скрытый
          default: false
          example: false
        playlistId:
          type: string
          description: Плэйлист ID
          format: uuid
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
        sum:
          type: number
          description: Сумма списания
          example: 10
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        approved:
          type: array
          description: Не обработан / Разрешен / Запрещен
          example:
            range:
              - NotProcessed
              - Allowed
          items:
            $ref: "#/components/schemas/BidApprove"
        status:
          type: array
          description: Ок / Подождите
          example:
            range:
              - OK
              - WAITING
          items:
            $ref: "#/components/schemas/BidStatus"
        dateWhen:
          description: Время когда
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        dateBefore:
          description: Время до
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
          nullable: true
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    BidsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/BidRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - seqNo
              - buyer
              - buyerId
              - seller
              - sellerId
              - monitor
              - monitorId
              - status
              - hide
              - playlist
              - playlistId
              - approved
              - dateWhen
              - dateBefore
              - playlistChange
              - sum
              - userId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    BidGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Взаимодействие покупателей и продавца
          allOf:
            - $ref: "#/components/schemas/BidResponse"
      required:
        - status
        - data
    BidUpdateRequest:
      type: object
      properties:
        approved:
          description: Не обработан / Разрешен / Запрещен
          example: NotProcessed
          allOf:
            - $ref: "#/components/schemas/BidApprove"
      required:
        - approved
    BidPrecalcPromoRequest:
      type: object
      properties:
        monitorIds:
          description: Мониторы для расчета
          type: array
          items:
            type: string
            format: uuid
        playlistDuration:
          type: number
          description: Длительность плейлиста (в секундах)
          example: 60
        dateFrom:
          type: string
          description: Дата и время начала
          example: "2021-01-01"
          format: date
        dateTo:
          type: string
          description: Дата и время окончания
          example: "2021-12-31"
          format: date
      required:
        - monitorIds
        - playlistDuration
        - dateFrom
        - dateTo
    BidPrecalcDataResponse:
      type: object
      properties:
        sum:
          type: string
          description: Итоговая сумма
      required:
        - sum
    BidPrecalcResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Возвращаемое значение
          allOf:
            - $ref: "#/components/schemas/BidPrecalcDataResponse"
      required:
        - status
        - data
    BidPrecalcSumRequest:
      type: object
      properties:
        playlistId:
          type: string
          description: Плэйлист ID
          format: uuid
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        price1s:
          type: integer
          description: Стоимость показа 1 секунды в рублях
          example: 1
        dateBefore:
          type: string
          description: Дата и время начала
          example: "2021-01-01"
          format: date
        dateWhen:
          type: string
          description: Дата и время окончания
          example: "2021-12-31"
          format: date
      required:
        - playlistId
        - minWarranty
        - price1s
        - dateBefore
        - dateWhen
    CrontabCreateRequest:
      type: object
      properties:
        crontab:
          type: string
          description: "Crontab: \"Second Minute Hour DayOfMonth Month DayOfWeek\""
          example: 0 0 0 * * *
    ConstantsResponse:
      type: object
      properties:
        VERSION_BACKEND:
          type: string
          description: Версия бэкенд
        SUBSCRIPTION_FEE:
          type: number
          description: Стоимость подписки
        MIN_INVOICE_SUM:
          type: number
          description: Минимальная сумма счета
        COMMISSION_PERCENT:
          type: number
          description: Процент комиссии
      required:
        - VERSION_BACKEND
        - SUBSCRIPTION_FEE
        - MIN_INVOICE_SUM
        - COMMISSION_PERCENT
    ConstantsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        data:
          description: Константы
          allOf:
            - $ref: "#/components/schemas/ConstantsResponse"
      required:
        - status
        - data
    WalletTransactionType:
      type: string
      enum:
        - DEBIT
        - CREDIT
    WalletRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор баланса
          format: uuid
        description:
          type: string
          description: Описание транзакции
        sum:
          type: number
          description: Баланс
          example: 0
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        type:
          type: array
          description: Тип транзакции
          example:
            range:
              - DEBIT
              - CREDIT
          items:
            $ref: "#/components/schemas/WalletTransactionType"
        createdAt:
          description: Время создания
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
        updatedAt:
          description: Время изменения
          oneOf:
            - type: string
              format: date-time
            - type: array
              items:
                type: string
                format: date-time
          examples:
            one: "2021-12-31T10:10:10"
            range:
              - "2021-12-31T10:10:10"
              - "2022-12-31T10:10:10"
          format: date-time
    WalletOperationsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/WalletRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - type
              - description
              - sum
              - userId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    WalletResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор баланса
          format: uuid
        type:
          description: Тип транзакции
          example: DEBIT
          allOf:
            - $ref: "#/components/schemas/WalletTransactionType"
        description:
          type: string
          description: Описание транзакции
        sum:
          type: number
          description: Баланс
          example: 0
        userId:
          type: string
          format: uuid
          description: Пользователь ID
        createdAt:
          type: string
          description: Время создания
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
        updatedAt:
          type: string
          description: Время изменения
          example: "2021-01-01T00:00:00.000Z"
          examples:
            one: "2021-01-01"
            two:
              - "2021-12-30"
              - "2021-12-31T10:10:10"
          format: date-time
      required:
        - id
        - type
        - description
        - sum
        - userId
    WalletOperationsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          allOf:
            - $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество операций с кошельком
        data:
          description: Операции с кошельком
          type: array
          items:
            $ref: "#/components/schemas/WalletResponse"
      required:
        - status
        - count
        - data
    WsEvent:
      type: string
      enum:
        - auth/token
        - bids
        - bid
        - monitor
        - monitor/status
        - monitor/delete
        - wallet
        - metrics
        - error
    WsEventClass:
      type: object
      properties:
        WsEvent:
          allOf:
            - $ref: "#/components/schemas/WsEvent"
externalDocs:
  description: MyScreen backend API
  url: https://api.myscreen.ru
