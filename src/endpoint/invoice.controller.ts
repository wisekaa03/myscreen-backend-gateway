import type {
  Request as ExpressRequest,
  Response as ExpressResponse,
} from 'express';
import {
  Body,
  Controller,
  HttpCode,
  Logger,
  NotAcceptableException,
  NotFoundException,
  Post,
  Req,
  Res,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';

import {
  BadRequestError,
  ForbiddenError,
  InternalServerError,
  InvoiceCreateRequest,
  InvoiceDownloadRequest,
  InvoiceIdRequest,
  InvoicesGetRequest,
  InvoicesGetResponse,
  NotFoundError,
  InvoiceGetResponse,
  ServiceUnavailableError,
  UnauthorizedError,
} from '../dto/index';
import { JwtAuthGuard, Roles, RolesGuard } from '../guards/index';
import { InvoiceService } from '../database/invoice.service';
import { paginationQueryToConfig } from '../shared/pagination-query-to-config';
import {
  Status,
  UserRoleEnum,
  SpecificFormat,
  InvoiceStatus,
} from '../enums/index';
import { TypeOrmFind } from '../shared/typeorm.find';
import { formatToContentType } from '../shared/format-to-content-type';
import { UserService } from '../database/user.service';
import { MailService } from '../mail/mail.service';

@ApiResponse({
  status: 400,
  description: 'Ответ будет таким если с данным что-то не так',
  type: BadRequestError,
})
@ApiResponse({
  status: 401,
  description: 'Ответ для незарегистрированного пользователя',
  type: UnauthorizedError,
})
@ApiResponse({
  status: 403,
  description: 'Ответ для неавторизованного пользователя',
  type: ForbiddenError,
})
@ApiResponse({
  status: 404,
  description: 'Ошибка медиа',
  type: NotFoundError,
})
@ApiResponse({
  status: 500,
  description: 'Ошибка сервера',
  type: InternalServerError,
})
@ApiResponse({
  status: 503,
  description: 'Ошибка сервера',
  type: ServiceUnavailableError,
})
@Roles(
  UserRoleEnum.Administrator,
  UserRoleEnum.Advertiser,
  UserRoleEnum.MonitorOwner,
  UserRoleEnum.Accountant,
)
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
@ApiTags('invoice')
@Controller('invoice')
export class InvoiceController {
  logger = new Logger(InvoiceController.name);

  constructor(
    private readonly userService: UserService,
    private readonly invoiceService: InvoiceService,
    private readonly mailService: MailService,
  ) {}

  @Post('/')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'orders-get',
    summary: 'Получение списка счётов',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    type: InvoicesGetResponse,
  })
  async getOrders(
    @Req() { user }: ExpressRequest,
    @Body() { where, select, scope }: InvoicesGetRequest,
  ): Promise<InvoicesGetResponse> {
    const whenUser =
      user.role === UserRoleEnum.Administrator ||
      user.role === UserRoleEnum.Accountant
        ? undefined
        : user;
    const [data, count] = await this.invoiceService.find({
      ...paginationQueryToConfig(scope),
      select,
      where: TypeOrmFind.Where(where, whenUser),
    });

    return {
      status: Status.Success,
      count,
      data,
    };
  }

  @Post('invoice')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'invoice',
    summary: 'Выставление счетов',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    type: InvoiceGetResponse,
  })
  async invoice(
    @Req() { user }: ExpressRequest,
    @Body() { sum, description }: InvoiceCreateRequest,
  ): Promise<InvoiceGetResponse> {
    const invoice = await this.invoiceService.create(
      user,
      sum,
      description ?? 'Autogenerated invoice',
    );

    return {
      status: Status.Success,
      data: invoice,
    };
  }

  @Post('confirmed')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'confirmed',
    summary: 'Подтверждение/отклонение счёта (только бухгалтер)',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    type: InvoiceGetResponse,
  })
  @Roles(UserRoleEnum.Administrator, UserRoleEnum.Accountant)
  @UseGuards(JwtAuthGuard, RolesGuard)
  async confirmed(
    @Req() { user }: ExpressRequest,
    @Body() { id }: InvoiceIdRequest,
  ): Promise<InvoiceGetResponse> {
    const order = await this.invoiceService.findOne({ where: { id } });
    if (!order) {
      throw new NotFoundException();
    }
    if (order.status !== InvoiceStatus.AWAITING_CONFIRMATION) {
      throw new NotAcceptableException();
    }

    const data = await this.invoiceService.statusChange(
      user,
      order,
      InvoiceStatus.CONFIRMED_PENDING_PAYMENT,
    );

    /* await */ this.mailService.invoiceConfirmed(user.email, order);

    return {
      status: Status.Success,
      data,
    };
  }

  @Post('payed')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'payed',
    summary: 'Оплата по счету (только бухгалтер)',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
  })
  @Roles(UserRoleEnum.Administrator, UserRoleEnum.Accountant)
  @UseGuards(JwtAuthGuard, RolesGuard)
  async payed(
    @Req() { user }: ExpressRequest,
    @Body() { id }: InvoiceIdRequest,
  ): Promise<InvoiceGetResponse> {
    const order = await this.invoiceService.findOne({ where: { id } });
    if (!order) {
      throw new NotFoundException();
    }
    if (order.status !== InvoiceStatus.CONFIRMED_PENDING_PAYMENT) {
      throw new NotAcceptableException();
    }

    const data = await this.invoiceService.statusChange(
      user,
      order,
      InvoiceStatus.PAID,
    );

    /* await */ this.mailService.invoicePayed(user.email, order);

    return {
      status: Status.Success,
      data,
    };
  }

  @Post('download')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'download',
    summary: 'Метод для скачивания файла excel/pdf/etc',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    content: {
      'application/vnd.ms-excel': {
        encoding: {
          ms_excel: {
            contentType: formatToContentType[SpecificFormat.XLSX],
          },
        },
      },
      'application/pdf': {
        encoding: {
          pdf: {
            contentType: formatToContentType[SpecificFormat.PDF],
          },
        },
      },
    },
  })
  async download(
    @Req() { user }: ExpressRequest,
    @Res() res: ExpressResponse,
    @Body() { format, id }: InvoiceDownloadRequest,
  ): Promise<void> {
    const invoice = await this.invoiceService.findOne({ where: { id } });
    if (!invoice) {
      throw new NotFoundException();
    }

    await this.invoiceService.download(user, res, invoice, format);
  }
}
