import type {
  Request as ExpressRequest,
  Response as ExpressResponse,
} from 'express';
import {
  Body,
  Controller,
  HttpCode,
  Logger,
  Post,
  Req,
  Res,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';

import {
  BadRequestError,
  ForbiddenError,
  InternalServerError,
  OrderInvoiceRequest,
  NotFoundError,
  OrderGetResponse,
  OrdersGetRequest,
  OrdersGetResponse,
  ServiceUnavailableError,
  UnauthorizedError,
  OrderApprovedRequest,
  OrderDownloadRequest,
} from '../dto/index';
import { JwtAuthGuard, Roles, RolesGuard } from '../guards/index';
import { OrderService } from '../database/order.service';
import { paginationQueryToConfig } from '../shared/pagination-query-to-config';
import { Status, UserRoleEnum, SpecificFormat } from '../enums/index';
import { TypeOrmFind } from '../shared/typeorm.find';
import { formatToContentType } from '../shared/format-to-content-type';
import { UserService } from '../database/user.service';

@ApiResponse({
  status: 400,
  description: 'Ответ будет таким если с данным что-то не так',
  type: BadRequestError,
})
@ApiResponse({
  status: 401,
  description: 'Ответ для незарегистрированного пользователя',
  type: UnauthorizedError,
})
@ApiResponse({
  status: 403,
  description: 'Ответ для неавторизованного пользователя',
  type: ForbiddenError,
})
@ApiResponse({
  status: 404,
  description: 'Ошибка медиа',
  type: NotFoundError,
})
@ApiResponse({
  status: 500,
  description: 'Ошибка сервера',
  type: InternalServerError,
})
@ApiResponse({
  status: 503,
  description: 'Ошибка сервера',
  type: ServiceUnavailableError,
})
@Roles(
  UserRoleEnum.Administrator,
  UserRoleEnum.Advertiser,
  UserRoleEnum.MonitorOwner,
  UserRoleEnum.Accountant,
)
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
@ApiTags('order')
@Controller('order')
export class OrderController {
  logger = new Logger(OrderController.name);

  constructor(
    private readonly userService: UserService,
    private readonly orderService: OrderService,
  ) {}

  @Post('/')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'orders-get',
    summary: 'Получение списка заказов',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    type: OrdersGetResponse,
  })
  async getOrders(
    @Req() { user }: ExpressRequest,
    @Body() { where, select, scope }: OrdersGetRequest,
  ): Promise<OrdersGetResponse> {
    const whenUser =
      user.role === UserRoleEnum.Administrator ||
      user.role === UserRoleEnum.Accountant
        ? undefined
        : user;
    const [data, count] = await this.orderService.find({
      ...paginationQueryToConfig(scope),
      select,
      where: TypeOrmFind.Where(where, whenUser),
    });

    return {
      status: Status.Success,
      count,
      data,
    };
  }

  @Post('invoice')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'invoice',
    summary: 'Выставление счетов',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    type: OrderGetResponse,
  })
  async invoice(
    @Req() { user }: ExpressRequest,
    @Body() { sum }: OrderInvoiceRequest,
  ): Promise<OrderGetResponse> {
    const invoice = await this.orderService.create(
      user,
      sum,
      'Autogenerated invoice',
    );

    return {
      status: Status.Success,
      data: invoice,
    };
  }

  @Post('approved')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'approved',
    summary: 'Подтверждение/отклонение инвойса',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
  })
  @Roles(UserRoleEnum.Administrator, UserRoleEnum.Accountant)
  @UseGuards(JwtAuthGuard, RolesGuard)
  async approved(
    @Req() { user }: ExpressRequest,
    @Body() { id, approved }: OrderApprovedRequest,
  ): Promise<OrderGetResponse> {
    const data = await this.orderService.approved(user, id, approved);

    return {
      status: Status.Success,
      data,
    };
  }

  @Post('download')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'download',
    summary: 'Метод для скачивания файла excel/pdf/etc',
  })
  @ApiResponse({
    status: 200,
    description: 'Успешный ответ',
    content: {
      'application/vnd.ms-excel': {
        encoding: {
          ms_excel: {
            contentType: formatToContentType[SpecificFormat.XLSX],
          },
        },
      },
      'application/pdf': {
        encoding: {
          pdf: {
            contentType: formatToContentType[SpecificFormat.PDF],
          },
        },
      },
    },
  })
  async download(
    @Req() { user }: ExpressRequest,
    @Res() res: ExpressResponse,
    @Body() { format, id }: OrderDownloadRequest,
  ): Promise<void> {
    await this.orderService.download(user, res, id, format);
  }
}
