name: Develop

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: self-hosted
    environment: tests
    steps:
      - name: Initializing the repository
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Environment variables
        run: |
          rm -rf .env.test
          touch .env.test

          # Server config
          echo "PORT=${{ vars.PORT }}" >>.env.test
          echo "API_PATH=${{ vars.API_PATH }}" >>.env.test
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >>.env.test
          echo "FILES_UPLOAD=${{ vars.FILES_UPLOAD }}" >>.env.test
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >>.env.test

          # PostgreSQL Credentials
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >>.env.test
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >>.env.test
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >>.env.test
          echo "DB_PORT=${{ vars.DB_PORT }}" >>.env.test
          echo "DB_HOST=${{ vars.DB_HOST }}" >>.env.test
          echo "DB_TYPE=${{ vars.DB_TYPE }}" >>.env.test
          echo "DB_SSL=${{ vars.DB_SSL }}" >>.env.test

          # JWT Credentials
          echo "JWT_ACCESS_TOKEN=${{ vars.JWT_ACCESS_TOKEN }}" >>.env.test
          echo "JWT_ACCESS_EXPIRES=${{ vars.JWT_ACCESS_EXPIRES }}" >>.env.test
          echo "JWT_REFRESH_TOKEN=${{ vars.JWT_REFRESH_TOKEN }}" >>.env.test
          echo "JWT_REFRESH_EXPIRES=${{ vars.JWT_REFRESH_EXPIRES }}" >>.env.test

          # Logstash config
          # echo "KIBANA_HOST=${{ vars.KIBANA_HOST }}" >>.env.test
          # echo "KIBANA_PORT=${{ vars.KIBANA_PORT }}" >>.env.test

          # Secrets
          echo "AWS_HOST=${{ vars.AWS_HOST }}" >>.env.test
          echo "AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }}" >>.env.test
          echo "AWS_SECRET_KEY=${{ vars.AWS_SECRET_KEY }}" >>.env.test
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >>.env.test
          echo "AWS_BUCKET=${{ vars.AWS_BUCKET }}" >>.env.test
          echo "AWS_SIGNED_URL_EXPIRES=${{ vars.AWS_SIGNED_URL_EXPIRES }}" >>.env.test

          echo "SUBSCRIPTION_FEE=${{ vars.SUBSCRIPTION_FEE }}" >>.env.test
          echo "SUBSCRIPTION_DESCRIPTION=${{ vars.SUBSCRIPTION_DESCRIPTION }}" >>.env.test
          echo "COMMISSION_PERCENT=${{ vars.COMMISSION_PERCENT }}" >>.env.test
          echo "MIN_INVOICE_SUM=${{ vars.MIN_INVOICE_SUM }}" >>.env.test

          echo "RABBITMQ_HOST=${{ vars.RABBITMQ_HOST }}" >>.env.test
          echo "RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}" >>.env.test
          echo "RABBITMQ_USERNAME=${{ vars.RABBITMQ_USERNAME }}" >>.env.test
          echo "RABBITMQ_PASSWORD=${{ vars.RABBITMQ_PASSWORD }}" >>.env.test

          echo "LANGUAGE_DEFAULT=${{ vars.LANGUAGE_DEFAULT }}" >>.env.test
      - name: Test
        run: yarn test
      - name: Build test
        if: ${{ !cancelled() }}
        run: yarn build

  develop:
    needs: test
    runs-on: self-hosted
    environment: develop
    env:
      SSH_PARAMS: 'ssh -o StrictHostKeyChecking=no'
      REMOTE_USER: ${{ vars.REMOTE_USER }}
      REMOTE_HOST: ${{ vars.REMOTE_HOST }}
      REMOTE_TARGET: ${{ vars.REMOTE_TARGET }}
    steps:
      - name: Initializing the repository
        uses: actions/checkout@v3
      - name: Telegram notification
        run: |
          echo "REPO_NAME=${{github.repository}}" | sed -r "s/^(\w+=).+\/(.*)/\1\2/g" >> "${GITHUB_ENV}"
          echo "JOB_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "${GITHUB_ENV}"
          echo "SERVER_URL=develop" >> "${GITHUB_ENV}"
      - name: Notify if the deployment was successful (Starting)
        uses: appleboy/telegram-action@master
        with:
          to: ${{ vars.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            [Starting](${{env.JOB_URL}})
            Deploy by *${{github.actor}}*
            Repo: *${{env.REPO_NAME}}*
            Commit: [${{github.event.commits[0].message}}](https://github.com/${{github.repository}}/commit/${{github.sha}})
            Server: *${{env.SERVER_URL}}*
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Build
        run: |
          yarn build
          rm -rf node_modules
      - name: Install Yarn dependencies (production)
        run: yarn install --production --frozen-lockfile
      - name: Environment variables
        run: |
          rm -rf .env
          touch .env

          # Server config
          echo "PORT=${{ vars.PORT }}" >>.env
          echo "API_PATH=${{ vars.API_PATH }}" >>.env
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >>.env
          echo "FILES_UPLOAD=${{ vars.FILES_UPLOAD }}" >>.env
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >>.env

          # PostgreSQL Credentials
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >>.env
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >>.env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >>.env
          echo "DB_PORT=${{ vars.DB_PORT }}" >>.env
          echo "DB_HOST=${{ vars.DB_HOST }}" >>.env
          echo "DB_TYPE=${{ vars.DB_TYPE }}" >>.env
          echo "DB_SSL=${{ vars.DB_SSL }}" >>.env

          # JWT Credentials
          echo "JWT_ACCESS_TOKEN=${{ vars.JWT_ACCESS_TOKEN }}" >>.env
          echo "JWT_ACCESS_EXPIRES=${{ vars.JWT_ACCESS_EXPIRES }}" >>.env
          echo "JWT_REFRESH_TOKEN=${{ vars.JWT_REFRESH_TOKEN }}" >>.env
          echo "JWT_REFRESH_EXPIRES=${{ vars.JWT_REFRESH_EXPIRES }}" >>.env

          # Logstash config
          # echo "KIBANA_HOST=${{ vars.KIBANA_HOST }}" >>.env
          # echo "KIBANA_PORT=${{ vars.KIBANA_PORT }}" >>.env

          # Secrets
          echo "AWS_HOST=${{ vars.AWS_HOST }}" >>.env
          echo "AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }}" >>.env
          echo "AWS_SECRET_KEY=${{ vars.AWS_SECRET_KEY }}" >>.env
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >>.env
          echo "AWS_BUCKET=${{ vars.AWS_BUCKET }}" >>.env
          echo "AWS_SIGNED_URL_EXPIRES=${{ vars.AWS_SIGNED_URL_EXPIRES }}" >>.env

          echo "SUBSCRIPTION_FEE=${{ vars.SUBSCRIPTION_FEE }}" >>.env
          echo "SUBSCRIPTION_DESCRIPTION=${{ vars.SUBSCRIPTION_DESCRIPTION }}" >>.env
          echo "COMMISSION_PERCENT=${{ vars.COMMISSION_PERCENT }}" >>.env
          echo "MIN_INVOICE_SUM=${{ vars.MIN_INVOICE_SUM }}" >>.env

          echo "RABBITMQ_HOST=${{ vars.RABBITMQ_HOST }}" >>.env
          echo "RABBITMQ_PORT=${{ vars.RABBITMQ_PORT }}" >>.env
          echo "RABBITMQ_USERNAME=${{ vars.RABBITMQ_USERNAME }}" >>.env
          echo "RABBITMQ_PASSWORD=${{ vars.RABBITMQ_PASSWORD }}" >>.env

          echo "LANGUAGE_DEFAULT=${{ vars.LANGUAGE_DEFAULT }}" >>.env
      - name: Deploying to Development
        run: |
          rsync -rlDzc -i --del -e "$SSH_PARAMS" "./" \
            "$REMOTE_USER"@"$REMOTE_HOST":"$REMOTE_TARGET" \
            --include="node_modules/exceljs/**/doc/" \
            --exclude="node_modules/**/AUTHORS" \
            --exclude="node_modules/**/ChangeLog" \
            --exclude="node_modules/**/CHANGES" \
            --exclude="node_modules/**/README.markdown" \
            --exclude="node_modules/**/README.mdown" \
            --exclude="node_modules/**/readme.markdown" \
            --exclude="node_modules/**/NOTICE" \
            --exclude="node_modules/**/LICENSE" \
            --exclude="node_modules/**/License" \
            --exclude="node_modules/**/LICENSE.*" \
            --exclude="node_modules/**/LICENCE" \
            --exclude="node_modules/**/license" \
            --exclude="node_modules/**/.babelrc" \
            --exclude="node_modules/**/.editorconfig" \
            --exclude="node_modules/**/.gitattributes" \
            --exclude="node_modules/**/.travis*" \
            --exclude="node_modules/**/.prettierrc*" \
            --exclude="node_modules/**/.airtap.*" \
            --exclude="node_modules/**/Gruntfile.*" \
            --exclude="node_modules/**/.npmignore" \
            --exclude="node_modules/**/.nvmrc" \
            --exclude="node_modules/**/.eslint*" \
            --exclude="node_modules/**/.nycrc*" \
            --exclude="node_modules/**/.jshintrc" \
            --exclude="node_modules/**/renovate.json" \
            --exclude="node_modules/**/jest.*" \
            --exclude="node_modules/**/bower.json" \
            --exclude="node_modules/**/.taprc*" \
            --exclude="node_modules/**/.commitlintrc.*" \
            --exclude="node_modules/**/.release-it.json" \
            --exclude="node_modules/**/nest-cli.json" \
            --exclude="node_modules/**/.tsbuildinfo" \
            --exclude="node_modules/**/Makefile" \
            --exclude="node_modules/**/tsconfig*" \
            --exclude="node_modules/**/tslint.*" \
            --exclude="node_modules/**/mocha.opts" \
            --exclude="node_modules/**/.dockerignore" \
            --exclude="node_modules/**/codecov.*" \
            --exclude="node_modules/**/test/" \
            --exclude="node_modules/**/tests/" \
            --exclude="node_modules/**/.github/" \
            --exclude="node_modules/**/.circleci/" \
            --exclude="node_modules/**/.vscode/" \
            --exclude="node_modules/**/.husky/" \
            --exclude="node_modules/**/docs/" \
            --exclude="node_modules/**/doc/" \
            --exclude="node_modules/**/example/" \
            --exclude="node_modules/**/examples/" \
            --exclude="node_modules/.yarn-integrity" \
            --exclude="node_modules/**.test.js" \
            --exclude="node_modules/**.js.flow" \
            --exclude="node_modules/**.config.js" \
            --exclude="node_modules/**.txt" \
            --exclude="node_modules/**.wiki" \
            --exclude="node_modules/**.lock" \
            --exclude="node_modules/**.ts" \
            --exclude="node_modules/**.cts" \
            --exclude="node_modules/**.mts" \
            --exclude="node_modules/**.md~" \
            --exclude="node_modules/**.md" \
            --exclude="node_modules/**.map" \
            --exclude="dist/**.ts" \
            --exclude="dist/**.map" \
            --include="dist/***" \
            --include="templates/***" \
            --include="static/***" \
            --include="upload/***" \
            --include="node_modules/***" \
            --include=".env" \
            --include="ecosystem.config.js" \
            --include="package.json" \
            --include="yarn.lock" \
            --exclude='*'
      - name: Run remote commands
        run: |
          # Copy the Yandex.Cloud certificate
          SSH_COMMAND+='mkdir -p '$REMOTE_TARGET'/certs && '
          SSH_COMMAND+='wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" -O '$REMOTE_TARGET'/certs/root.crt && '

          # Yarn pm2 starting
          SSH_COMMAND+='cd '$REMOTE_TARGET' && yarn pm2:start'

          # Run command
          $SSH_PARAMS -t "$REMOTE_USER"@"$REMOTE_HOST" $SSH_COMMAND
      - name: Notify if the deployment was successful (Finished)
        if: ${{ success() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ vars.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            [Finished](${{env.JOB_URL}})
            Deploy by *${{github.actor}}*
            Repo: *${{env.REPO_NAME}}*
            Commit: [${{github.event.commits[0].message}}](https://github.com/${{github.repository}}/commit/${{github.sha}})
            Server: *${{env.SERVER_URL}}*
      - name: Notify if deployment fails (ERROR)
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ vars.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            [ERRORED](${{env.JOB_URL}})
            Deploy by *${{github.actor}}*
            Repo: *${{env.REPO_NAME}}*
            Commit: [${{github.event.commits[0].message}}](https://github.com/${{github.repository}}/commit/${{github.sha}})
            Server: *${{env.SERVER_URL}}*
