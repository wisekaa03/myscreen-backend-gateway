name: Deploy

concurrency: production

on: [push, workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: tests
    steps:
      - name: Initializing the repository
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            ~/node_modules
          key: ${{ runner.os }}-yarn-tests-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-tests-
            ${{ runner.os }}-yarn-
      - name: Update Ubuntu
        run: sudo apt-get update -y
      - name: Install Ubuntu dependencies
        run: sudo apt-get install -y ffmpeg
      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Environment variables
        run: |
          rm -rf .env
          touch .env

          # Server config
          echo "PORT=${{ vars.PORT }}" >>.env
          echo "API_PATH=${{ vars.API_PATH }}" >>.env
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >>.env
          echo "FILES_UPLOAD=${{ vars.FILES_UPLOAD }}" >>.env
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >>.env

          # PostgreSQL Credentials
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >>.env
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >>.env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >>.env
          echo "DB_PORT=${{ vars.DB_PORT }}" >>.env
          echo "DB_HOST=${{ vars.DB_HOST }}" >>.env
          echo "DB_TYPE=${{ vars.DB_TYPE }}" >>.env

          # JWT Credentials
          echo "JWT_ACCESS_TOKEN=${{ vars.JWT_ACCESS_TOKEN }}" >>.env
          echo "JWT_ACCESS_EXPIRES=${{ vars.JWT_ACCESS_EXPIRES }}" >>.env
          echo "JWT_REFRESH_TOKEN=${{ vars.JWT_REFRESH_TOKEN }}" >>.env
          echo "JWT_REFRESH_EXPIRES=${{ vars.JWT_REFRESH_EXPIRES }}" >>.env

          # Logstash config
          # echo "KIBANA_HOST=${{ vars.KIBANA_HOST }}" >>.env
          # echo "KIBANA_PORT=${{ vars.KIBANA_PORT }}" >>.env

          # Secrets
          echo "AWS_HOST=${{ vars.AWS_HOST }}" >>.env
          echo "AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }}" >>.env
          echo "AWS_SECRET_KEY=${{ vars.AWS_SECRET_KEY }}" >>.env
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >>.env
          echo "AWS_BUCKET=${{ vars.AWS_BUCKET }}" >>.env

          echo "MAIL_DOMAIN=${{ vars.MAIL_DOMAIN }}" >>.env
          echo "MAIL_KEY_SELECTOR=${{ vars.MAIL_KEY_SELECTOR }}" >>.env
          echo "MAIL_PRIVATE_KEY=${{ vars.MAIL_PRIVATE_KEY }}" >>.env
          echo "MAIL_HOST=${{ vars.MAIL_HOST }}" >>.env
          echo "MAIL_PORT=${{ vars.MAIL_PORT }}" >>.env
          echo "MAIL_FROM=${{ vars.MAIL_FROM }}" >>.env
          echo "MAIL_USER=${{ vars.MAIL_USER }}" >>.env
          echo "MAIL_PASS=${{ vars.MAIL_PASS }}" >>.env

          echo "ACCEPTANCE_ACT_SUM=${{ vars.ACCEPTANCE_ACT_SUM }}" >>.env
          echo "ACCEPTANCE_ACT_DESCRIPTION=${{ vars.ACCEPTANCE_ACT_DESCRIPTION }}" >>.env
      - name: Test
        run: yarn test
      - name: Test end to end
        run: yarn test:e2e

  deployment:
    needs: 'test'
    # if: github.ref_name == 'develop'
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Initializing the repository
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            ~/node_modules
          key: ${{ runner.os }}-yarn-deploy-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-deploy-
            ${{ runner.os }}-yarn-
      - name: Update Ubuntu
        run: sudo apt-get update -y
      - name: Install Ubuntu dependencies
        run: sudo apt-get install -y ffmpeg
      - name: Install Yarn dependencies
        run: yarn install --production --frozen-lockfile
      - name: Build
        run: yarn build
      - name: Environment variables
        run: |
          rm -rf .env
          touch .env

          # Server config
          echo "PORT=${{ vars.PORT }}" >>.env
          echo "API_PATH=${{ vars.API_PATH }}" >>.env
          echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >>.env
          echo "FILES_UPLOAD=${{ vars.FILES_UPLOAD }}" >>.env
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >>.env

          # PostgreSQL Credentials
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >>.env
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >>.env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >>.env
          echo "DB_PORT=${{ vars.DB_PORT }}" >>.env
          echo "DB_HOST=${{ vars.DB_HOST }}" >>.env
          echo "DB_TYPE=${{ vars.DB_TYPE }}" >>.env

          # JWT Credentials
          echo "JWT_ACCESS_TOKEN=${{ vars.JWT_ACCESS_TOKEN }}" >>.env
          echo "JWT_ACCESS_EXPIRES=${{ vars.JWT_ACCESS_EXPIRES }}" >>.env
          echo "JWT_REFRESH_TOKEN=${{ vars.JWT_REFRESH_TOKEN }}" >>.env
          echo "JWT_REFRESH_EXPIRES=${{ vars.JWT_REFRESH_EXPIRES }}" >>.env

          # Logstash config
          # echo "KIBANA_HOST=${{ vars.KIBANA_HOST }}" >>.env
          # echo "KIBANA_PORT=${{ vars.KIBANA_PORT }}" >>.env

          # Secrets
          echo "AWS_HOST=${{ vars.AWS_HOST }}" >>.env
          echo "AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }}" >>.env
          echo "AWS_SECRET_KEY=${{ vars.AWS_SECRET_KEY }}" >>.env
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >>.env
          echo "AWS_BUCKET=${{ vars.AWS_BUCKET }}" >>.env

          echo "MAIL_DOMAIN=${{ vars.MAIL_DOMAIN }}" >>.env
          echo "MAIL_KEY_SELECTOR=${{ vars.MAIL_KEY_SELECTOR }}" >>.env
          echo "MAIL_PRIVATE_KEY=${{ vars.MAIL_PRIVATE_KEY }}" >>.env
          echo "MAIL_HOST=${{ vars.MAIL_HOST }}" >>.env
          echo "MAIL_PORT=${{ vars.MAIL_PORT }}" >>.env
          echo "MAIL_FROM=${{ vars.MAIL_FROM }}" >>.env
          echo "MAIL_USER=${{ vars.MAIL_USER }}" >>.env
          echo "MAIL_PASS=${{ vars.MAIL_PASS }}" >>.env

          echo "ACCEPTANCE_ACT_SUM=${{ vars.ACCEPTANCE_ACT_SUM }}" >>.env
          echo "ACCEPTANCE_ACT_DESCRIPTION=${{ vars.ACCEPTANCE_ACT_DESCRIPTION }}" >>.env
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          name: id_rsa
      - name: Deploying to Production
        run: |
          SSH_PARAMS="ssh -o StrictHostKeyChecking=no"

          rsync -rlDzc -i --del -e "$SSH_PARAMS" "./" \
            "${{ secrets.REMOTE_USER }}"@"${{ secrets.REMOTE_HOST }}":"${{ secrets.REMOTE_TARGET }}" \
            --exclude="node_modules/**/LICENSE" \
            --exclude="node_modules/**/license" \
            --exclude="node_modules/**/LICENSE.txt" \
            --exclude="node_modules/**/*.lock" \
            --exclude="node_modules/**.ts" \
            --exclude="node_modules/**.md" \
            --exclude="node_modules/**.map" \
            --exclude="dist/**.ts" \
            --exclude="dist/**.map" \
            --include="dist/***" \
            --include="templates/***" \
            --include="static/***" \
            --include="upload/***" \
            --include="node_modules/***" \
            --include=".env" \
            --include="ecosystem.config.js" \
            --include="package.json" \
            --include="yarn.lock" \
            --exclude='*'

          # Go-to dir
          SSH_COMMAND="cd $2 && "

          # Copy the Yandex.Cloud certificate
          SSH_COMMAND+="mkdir -p certs && "
          SSH_COMMAND+='wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" -O certs/root.crt && '

          # Cleanup `upload` folder
          SSH_COMMAND+="find upload -type f -atime +7 -delete && "

          # Yarn pm2 starting
          SSH_COMMAND+="yarn pm2:start"

          # Run command
          $SSH_PARAMS -t "${{ secrets.REMOTE_USER }}"@"${{ secrets.REMOTE_HOST }}" $SSH_COMMAND
