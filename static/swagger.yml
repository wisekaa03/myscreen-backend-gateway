openapi: 3.0.0
paths:
  /api/v2/auth:
    get:
      operationId: auth-get
      summary: Проверяет, авторизован ли пользователь и выдает о пользователе полную
        информацию
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400":
          &a1
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a2
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "412":
          &a3
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500":
          &a4
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          &a5
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        &a6
        - auth
      security:
        - bearer: []
    patch:
      operationId: auth-update
      summary: Изменение аккаунта пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
      security:
        - bearer: []
  /api/v2/auth/login:
    post:
      operationId: login
      summary: Авторизация пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/register:
    post:
      operationId: register
      summary: Регистрация пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/refresh:
    post:
      operationId: refresh
      summary: Обновление токена
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRefreshRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRefreshResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/email-verify:
    post:
      operationId: email-verify
      summary: Подтвердить email пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/reset-password:
    post:
      operationId: reset-password
      summary: Отправить на почту пользователю разрешение на смену пароля
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordInvitationRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/reset-password-verify:
    post:
      operationId: reset-password-verify
      summary: Меняет пароль пользователя по приглашению из почты
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordVerifyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
  /api/v2/auth/disable:
    patch:
      operationId: disable
      summary: Скрытие аккаунта пользователя
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a1
        "401": *a2
        "412": *a3
        "500": *a4
        "503": *a5
      tags: *a6
      security:
        - bearer: []
  /api/v2/monitor:
    post:
      operationId: monitors-get
      summary: Получение списка мониторов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400":
          &a7
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a8
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a9
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          &a10
          description: Ошибка монитора
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          &a11
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          &a12
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        &a13
        - monitor
      security:
        &a14
        - bearer: []
    put:
      operationId: monitor-create
      summary: Создание монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorCreateResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
  /api/v2/monitor/playlist:
    patch:
      operationId: monitors-playlist-create
      summary: Создание связки плэйлиста и монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
    delete:
      operationId: monitors-playlist-delete
      summary: Удаление связки плэйлиста и монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
  "/api/v2/monitor/{monitorId}":
    get:
      operationId: monitor-get
      summary: Получение монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
    patch:
      operationId: monitor-update
      summary: Изменение монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
    delete:
      operationId: monitor-delete
      summary: Удаление монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a7
        "401": *a8
        "403": *a9
        "404": *a10
        "500": *a11
        "503": *a12
      tags: *a13
      security: *a14
  /api/v2/editor:
    post:
      operationId: editors-get
      summary: Получение списка редакторов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorsGetResponse"
        "400":
          &a15
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a16
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a17
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          &a18
          description: Ошибка монитора
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          &a19
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          &a20
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        &a21
        - editor
      security:
        &a22
        - bearer: []
    put:
      operationId: editor-create
      summary: Создание редактора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/{editorId}":
    get:
      operationId: editor-get
      summary: Получение редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
    patch:
      operationId: editor-update
      summary: Изменить редактор
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
    delete:
      operationId: editor-delete
      summary: Удаление редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/layer/{editorId}":
    put:
      operationId: editor-layer-create
      summary: Создание слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/layer/{editorId}/{layerId}":
    get:
      operationId: editor-layer-get
      summary: Получение слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
    patch:
      operationId: editor-layer-update
      summary: Изменить слой редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
    delete:
      operationId: editor-layer-delete
      summary: Удаление слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/layer/{editorId}/{layerId}/{moveIndex}":
    put:
      operationId: editor-layer-move
      summary: Изменить очередь слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
        - name: moveIndex
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/frame/{editorId}/{time}":
    post:
      operationId: editor-frame-get
      summary: Получение кадра из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: time
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Успешный ответ
          content:
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  "/api/v2/editor/export/{editorId}":
    get:
      operationId: editor-get-export
      summary: Узнать статус экспорта видео из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetRenderingStatusResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
    post:
      operationId: editor-export
      summary: Экспорт видео из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorExportRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *a15
        "401": *a16
        "403": *a17
        "404": *a18
        "500": *a19
        "503": *a20
      tags: *a21
      security: *a22
  /api/v2/file:
    post:
      operationId: files-get
      summary: Получение списка файлов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesGetResponse"
        "400":
          &a23
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a24
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a25
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          &a26
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409":
          &a27
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500":
          &a28
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          &a29
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        &a30
        - file
      security:
        &a31
        - bearer: []
    put:
      operationId: files-upload
      summary: Загрузка файлов
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
                - param
              properties:
                files:
                  type: array
                  description: Файл(ы)
                  items:
                    type: string
                    format: binary
                param:
                  type: object
                  description: Параметры загрузки файла
                  $ref: "#/components/schemas/FileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesUploadResponse"
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
  "/api/v2/file/{fileId}":
    get:
      operationId: file-get-s3
      summary: Скачивание медиа
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/mp4:
              encoding:
                video_mp4:
                  contentType: video/mp4
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
            image/png:
              encoding:
                image_png:
                  contentType: image/png
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
    post:
      operationId: file-get
      summary: Получить файл
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
    patch:
      operationId: file-update
      summary: Изменить файл
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
    delete:
      operationId: file-delete
      summary: Удаление файла
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
  "/api/v2/file/{fileId}/preview":
    get:
      operationId: file-get-preview
      summary: Получить файл превью
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/mp4:
              encoding:
                video_mp4:
                  contentType: video/mp4
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
            image/png:
              encoding:
                image_png:
                  contentType: image/png
        "400": *a23
        "401": *a24
        "403": *a25
        "404": *a26
        "409": *a27
        "500": *a28
        "503": *a29
      tags: *a30
      security: *a31
  /api/v2/folder:
    post:
      operationId: folders-get
      summary: Получение списка папок
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoldersGetResponse"
        "400":
          &a32
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a33
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a34
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          &a35
          description: Ошибка папки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          &a36
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      tags:
        &a37
        - folder
      security:
        &a38
        - bearer: []
    put:
      operationId: folder-create
      summary: Создание новой папки
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderCreateRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *a32
        "401": *a33
        "403": *a34
        "404": *a35
        "500": *a36
      tags: *a37
      security: *a38
  "/api/v2/folder/{folderId}":
    get:
      operationId: folder-get
      summary: Получение информации о папке
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *a32
        "401": *a33
        "403": *a34
        "404": *a35
        "500": *a36
      tags: *a37
      security: *a38
    patch:
      operationId: folder-update
      summary: Изменение информации о папке
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *a32
        "401": *a33
        "403": *a34
        "404": *a35
        "500": *a36
      tags: *a37
      security: *a38
    delete:
      operationId: folder-delete
      summary: Удаление папки
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a32
        "401": *a33
        "403": *a34
        "404": *a35
        "500": *a36
      tags: *a37
      security: *a38
  /api/v2/user:
    get:
      operationId: users-get
      summary: Получение информации о пользователях (только администратор)
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersGetResponse"
        "400":
          &a39
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a40
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a41
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "500":
          &a42
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      tags:
        &a43
        - user
      security:
        &a44
        - bearer: []
  "/api/v2/user/disable/{userId}":
    patch:
      operationId: user-disable
      summary: Скрытие аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a39
        "401": *a40
        "403": *a41
        "500": *a42
      tags: *a43
      security: *a44
  "/api/v2/user/enable/{userId}":
    patch:
      operationId: user-enable
      summary: Открытие аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a39
        "401": *a40
        "403": *a41
        "500": *a42
      tags: *a43
      security: *a44
  "/api/v2/user/{userId}":
    get:
      operationId: user-get
      summary: Получение информации о пользователе (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *a39
        "401": *a40
        "403": *a41
        "500": *a42
      tags: *a43
      security: *a44
    patch:
      operationId: user-update
      summary: Изменение информации о пользователе (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *a39
        "401": *a40
        "403": *a41
        "500": *a42
      tags: *a43
      security: *a44
    delete:
      operationId: user-delete
      summary: Удаление аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a39
        "401": *a40
        "403": *a41
        "500": *a42
      tags: *a43
      security: *a44
  /api/v2/order:
    post:
      operationId: orders-get
      summary: Получение списка заказов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrdersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersGetResponse"
        "400":
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        - order
      security:
        - bearer: []
  /api/v2/payment:
    post:
      operationId: payments-get
      summary: Получение списка оплат
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentsGetResponse"
        "400":
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        - payment
      security:
        - bearer: []
  /api/v2/playlist:
    post:
      operationId: playlists-get
      summary: Получение списка плэйлистов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistsGetResponse"
        "400":
          &a45
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          &a46
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          &a47
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          &a48
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          &a49
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          &a50
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        &a51
        - playlist
      security:
        &a52
        - bearer: []
    put:
      operationId: playlist-create
      summary: Создание плэйлиста
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *a45
        "401": *a46
        "403": *a47
        "404": *a48
        "500": *a49
        "503": *a50
      tags: *a51
      security: *a52
  "/api/v2/playlist/{playlistId}":
    get:
      operationId: playlist-get
      summary: Получение плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *a45
        "401": *a46
        "403": *a47
        "404": *a48
        "500": *a49
        "503": *a50
      tags: *a51
      security: *a52
    patch:
      operationId: playlist-update
      summary: Обновление плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *a45
        "401": *a46
        "403": *a47
        "404": *a48
        "500": *a49
        "503": *a50
      tags: *a51
      security: *a52
    delete:
      operationId: playlist-delete
      summary: Удаление плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *a45
        "401": *a46
        "403": *a47
        "404": *a48
        "500": *a49
        "503": *a50
      tags: *a51
      security: *a52
info:
  title: MyScreen backend API
  description: MyScreen backend API
  version: 2.9.2
  contact:
    name: Stanislav V Vyaliy
    url: https://wisekaa.dev
    email: wisekaa03@gmail.com
tags:
  - name: auth
    description: Аутентификация пользователя
  - name: user
    description: Пользователи (только администратор)
  - name: folder
    description: Папки
  - name: file
    description: Файлы
  - name: playlist
    description: Плейлисты
  - name: monitor
    description: Мониторы
  - name: editor
    description: Редакторы
  - name: order
    description: Заказы
  - name: payment
    description: Оплата
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Токен авторизации
      name: token
  schemas:
    BadRequestError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 400
        code:
          type: string
          example: server-error.10004
        message:
          type: string
          example: Bad request
      required:
        - status
        - statusCode
        - code
        - message
    UnauthorizedError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 401
        code:
          type: string
          example: server-error.10001
        message:
          type: string
          example: Unauthorized request
      required:
        - status
        - statusCode
        - code
        - message
    PreconditionFailedError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 412
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: User exists
      required:
        - status
        - statusCode
        - code
        - message
    InternalServerError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 500
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Server error
      required:
        - status
        - statusCode
        - code
        - message
    ServiceUnavailableError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 503
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Service Unavailable
      required:
        - status
        - statusCode
        - code
        - message
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор пользователя
          format: uuid
          example: "1234567"
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
        name:
          type: string
          description: Имя
          example: John
        middleName:
          type: string
          description: Отчество
          example: Doe
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
        city:
          type: string
          description: Город
          example: Krasnodar
        country:
          type: string
          description: Страна
          example: RU
        company:
          type: string
          description: Компания
          example: ACME corporation
        role:
          type: string
          description: Роль пользователя
          enum:
            &a53
            - monitor-owner
            - advertiser
            - administrator
          example: advertiser
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        isDemoUser:
          type: boolean
          description: Демо пользователь
          example: true
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
        countUsedSpace:
          type: number
          description: Использованное место
          example: 0
      required:
        - id
        - email
        - role
        - createdAt
        - updatedAt
    UserGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - data
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
        name:
          type: string
          description: Имя
          example: John
        middleName:
          type: string
          description: Отчество
          example: Doe
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
        city:
          type: string
          description: Город
          example: Krasnodar
        country:
          type: string
          description: Страна
          example: RU
        company:
          type: string
          description: Компания
          example: ACME corporation
        role:
          type: string
          description: Роль пользователя
          enum: *a53
          example: advertiser
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
      required:
        - email
        - password
    AuthenticationPayload:
      type: object
      properties:
        type:
          type: string
          description: "Тип: Bearer"
          example: bearer
        token:
          type: string
          description: "Токен, используемый в Authorization: Bearer"
          example: eyJcbGciOcJIUcI1xxxxxxxxxxxxxxxx
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - type
        - token
        - refreshToken
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - payload
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
        name:
          type: string
          description: Имя
          example: John
        middleName:
          type: string
          description: Отчество
          example: Doe
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
        city:
          type: string
          description: Город
          example: Krasnodar
        country:
          type: string
          description: Страна
          example: RU
        company:
          type: string
          description: Компания
          example: ACME corporation
        role:
          type: string
          description: Роль пользователя
          enum: *a53
          example: advertiser
      required:
        - email
        - password
        - role
    AuthRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - refreshToken
    AuthRefreshResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
      required:
        - status
        - payload
    VerifyEmailRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
      required:
        - verify
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
      required:
        - status
    ResetPasswordInvitationRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
      required:
        - email
    ResetPasswordVerifyRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
        password:
          type: string
          example: Secret~12345678
      required:
        - verify
        - password
    ForbiddenError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 403
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: Forbidden
      required:
        - status
        - statusCode
        - code
        - message
    NotFoundError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 404
        code:
          type: string
          example: server-error.10005
        message:
          type: string
          example: Not Found
      required:
        - status
        - statusCode
        - code
        - message
    Address:
      type: object
      properties:
        country:
          type: string
          description: Страна
          example: Россия
        city:
          type: string
          description: Город
          example: Краснодар
        street:
          type: string
          description: Улица
          example: Красная
        house:
          type: string
          description: Дом
          example: 1
        room:
          type: string
          description: Комната
          example: 1
    MonitorPrice:
      type: object
      properties:
        of1s:
          type: number
          description: Стоимость показа 1 секунды
          example: 1
        show100:
          type: number
          description: Стоимость 100 показов в день
          example: 100
    MonitorInfo:
      type: object
      properties:
        model:
          type: string
          description: Модель
          example: Samsung
        resolution:
          type: string
          description: Разрешение
          example: 3840x2190
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 0
    MonitorPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example:
            &a54
            city: Krasnodar
            country: Russia
            street: Krasnaya
            house: 122
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          type: string
          description: Категория
          enum:
            &a55
            - GAS_STATION
            - MALL
            - COMMERCIAL_CENTRE
            - MUNICIPAL_INSTITUTION
            - EDUCATIONAL_INSTITUTION
            - RETAIL_SHOP
            - STREET_MONITOR
            - SHOWCASE
            - STELLA
          example: GAS_STATION
        price:
          description: Стоимость показов
          example:
            &a56
            of1s: 0
            show100: 0
          allOf:
            - $ref: "#/components/schemas/MonitorPrice"
        orientation:
          type: string
          description: Ориентация экрана
          enum:
            &a57
            - Horizontal
            - Vertical
          example: Horizontal
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example:
            &a58
            model: Samsung
            resolution: 0
            angle: 0
            matrix: 0
            brightness: 0
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
        status:
          type: string
          description: Подключен
          enum:
            &a59
            - offline
            - online
          example: offline
        latitude:
          type: number
          description: Широта
          example: "45.0448400"
        longitude:
          type: number
          description: Долгота
          example: "38.9760300"
    LimitRequest:
      type: object
      properties:
        limit:
          type: number
          description: Лимит строк результатов
          example: 20
        page:
          type: number
          description: Страница результатов
          example: 1
        order:
          type: object
          description: Порядок результатов
          example:
            createdAt: DESC
    MonitorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/MonitorPartialRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    FolderResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
      required:
        - id
        - name
        - createdAt
        - updatedAt
    MonitorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *a54
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          type: string
          description: Категория
          enum: *a55
          example: GAS_STATION
        price:
          description: Стоимость показов
          example: *a56
          allOf:
            - $ref: "#/components/schemas/MonitorPrice"
        orientation:
          type: string
          description: Ориентация экрана
          enum: *a57
          example: Horizontal
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *a58
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
        status:
          type: string
          description: Подключен
          enum: *a59
          example: offline
        lastSeen:
          format: date-time
          type: string
          description: Последний раз виден
          example: null
        latitude:
          type: number
          description: Широта
          example: "45.0448400"
        longitude:
          type: number
          description: Долгота
          example: "38.9760300"
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
      required:
        - id
        - name
        - category
        - orientation
        - monitorInfo
        - attached
        - code
        - status
        - lastSeen
        - latitude
        - longitude
        - createdAt
        - updatedAt
    FileResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
        extension:
          type: string
          description: Расширение файла
          example: mp4
        hash:
          type: string
          description: Hash файла
          example: 2b0439011a3a215ae1756bfc342e5bbc
        videoType:
          type: string
          description: Тип файла
          enum:
            &a63
            - video
            - image
            - audio
            - other
          example: video
        category:
          type: string
          description: В какую категорию относить файл
          enum:
            &a62
            - ownership
            - photo
            - media
          example: media
        filesize:
          type: number
          description: Размер файла
          example: 210000
        duration:
          type: number
          description: Продолжительность видео
          example: 10
        width:
          type: number
          description: Размер по горизонтали
          example: 1024
        height:
          type: number
          description: Размер по вертикали
          example: 1024
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
        folder:
          description: Папка
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
        monitors:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/MonitorResponse"
        playlists:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponse"
      required:
        - id
        - name
        - extension
        - hash
        - videoType
        - category
        - filesize
        - duration
        - width
        - height
        - createdAt
        - updatedAt
        - folder
    PlaylistResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          example: "1234567"
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
        monitors:
          type: array
          description: Мониторы
          items:
            $ref: "#/components/schemas/MonitorResponse"
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - name
        - monitors
        - createdAt
        - updatedAt
        - files
    MonitorPlaylistResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *a54
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          type: string
          description: Категория
          enum: *a55
          example: GAS_STATION
        price:
          description: Стоимость показов
          example: *a56
          allOf:
            - $ref: "#/components/schemas/MonitorPrice"
        orientation:
          type: string
          description: Ориентация экрана
          enum: *a57
          example: Horizontal
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *a58
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
        status:
          type: string
          description: Подключен
          enum: *a59
          example: offline
        lastSeen:
          format: date-time
          type: string
          description: Последний раз виден
          example: null
        latitude:
          type: number
          description: Широта
          example: "45.0448400"
        longitude:
          type: number
          description: Долгота
          example: "38.9760300"
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
        playlist:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        files:
          description: Фото монитора. Документы на право владения.
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - name
        - category
        - orientation
        - monitorInfo
        - attached
        - code
        - status
        - lastSeen
        - latitude
        - longitude
        - createdAt
        - updatedAt
    MonitorsGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество мониторов
        data:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/MonitorPlaylistResponse"
      required:
        - status
        - count
        - data
    MonitorRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *a54
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          type: string
          description: Категория
          enum: *a55
          example: GAS_STATION
        price:
          description: Стоимость показов
          example: *a56
          allOf:
            - $ref: "#/components/schemas/MonitorPrice"
        orientation:
          type: string
          description: Ориентация экрана
          enum: *a57
          example: Horizontal
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *a58
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
        status:
          type: string
          description: Подключен
          enum: *a59
          example: offline
        latitude:
          type: number
          description: Широта
          example: "45.0448400"
        longitude:
          type: number
          description: Долгота
          example: "38.9760300"
      required:
        - name
        - category
        - orientation
        - monitorInfo
        - code
        - status
        - latitude
        - longitude
    MonitorCreateResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorResponse"
      required:
        - status
        - data
    MonitorsPlaylistAttachRequest:
      type: object
      properties:
        playlistId:
          type: string
          description: Плэйлист
          format: uuid
        monitors:
          description: Мониторы
          type: array
          items:
            type: string
            format: uuid
      required:
        - playlistId
        - monitors
    MonitorGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorPlaylistResponse"
      required:
        - status
        - data
    EditorPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          example: "12345678"
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        renderingStatus:
          type: string
          description: Статус рендеринга
          enum:
            &a60
            - initial
            - ready
            - pending
            - error
          example: initial
    EditorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/EditorPartialRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    EditorLayerResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор слоя
          example: "12345678"
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        file:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - index
        - duration
        - cutFrom
        - cutTo
        - start
        - mixVolume
        - createdAt
        - updatedAt
        - file
    EditorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          example: "12345678"
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        renderingStatus:
          type: string
          description: Статус рендеринга
          enum: *a60
          example: initial
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
        renderingError:
          type: string
          description: Ошибка рендеринга
        renderedFile:
          description: Обработанный файл
          allOf:
            &a61
            - $ref: "#/components/schemas/FileResponse"
        keepSourceAudio:
          type: boolean
          description: ""
          example: true
        totalDuration:
          type: number
          description: Общее время
          example: 0
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        videoLayers:
          description: Видео слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
        audioLayers:
          description: Аудио слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - id
        - name
        - width
        - height
        - fps
        - renderingStatus
        - renderingPercent
        - renderingError
        - renderedFile
        - keepSourceAudio
        - totalDuration
        - createdAt
        - updatedAt
        - videoLayers
        - audioLayers
    EditorsGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество оплат
        data:
          description: Оплаты
          type: array
          items:
            $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - count
        - data
    EditorCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: ""
          example: true
      required:
        - name
        - width
        - height
        - fps
        - keepSourceAudio
    EditorGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - data
    EditorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: ""
          example: true
    EditorLayerCreateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        file:
          type: string
          description: Файл
          format: uuid
      required:
        - index
        - duration
        - cutFrom
        - cutTo
        - start
        - mixVolume
        - file
    EditorLayerGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Слой редактора
          allOf:
            - $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - status
        - data
    EditorLayerUpdateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
    EditorRenderingStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          example: "12345678"
        renderingStatus:
          type: string
          description: Статус рендеринга
          enum: *a60
          example: initial
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
        renderingError:
          type: string
          description: Ошибка рендеринга
        renderedFile:
          description: Обработанный файл
          allOf: *a61
      required:
        - id
        - renderingStatus
        - renderingPercent
        - renderingError
        - renderedFile
    EditorGetRenderingStatusResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorRenderingStatusResponse"
      required:
        - status
        - data
    EditorExportRequest:
      type: object
      properties:
        rerender:
          type: boolean
          description: Перезапустить рендеринг
          default: false
          example: false
    ConflictError:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
          description: Статус операции
        statusCode:
          type: number
          example: 409
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Conflict exists
      required:
        - status
        - statusCode
        - code
        - message
    FileUploadRequest:
      type: object
      properties:
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        category:
          type: string
          description: В какую категорию относить файл
          enum: *a62
          example: media
        monitorId:
          type: string
          format: uuid
          description: Монитор
    FilePartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        videoType:
          type: string
          description: Тип файла
          enum: *a63
          example: video
        category:
          type: string
          description: В какую категорию относить файл
          enum: *a62
          example: media
    FilesGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FilePartialRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    FilesGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FilesUploadResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FileGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - data
    FileUpdateRequest:
      type: object
      properties:
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
    FolderPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
    FoldersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FolderPartialRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    FoldersGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество папок
          example: 1
        data:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - count
        - data
    FolderCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
      required:
        - name
    FolderGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Папки
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - data
    FolderUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
      required:
        - name
    UsersGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Пользователи
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - data
    OrderRequest:
      type: object
      properties:
        description:
          type: string
          description: Описание заказа
          example: описание заказа
    OrdersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/OrderRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    OrderResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        description:
          type: string
          description: Описание заказа
          example: описание заказа
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
      required:
        - id
        - description
        - createdAt
        - updatedAt
    OrdersGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество заказов
        data:
          description: Заказы
          type: array
          items:
            $ref: "#/components/schemas/OrderResponse"
      required:
        - status
        - count
        - data
    PaymentRequest:
      type: object
      properties:
        description:
          type: string
          description: Описание платежа
          example: описание платежа
    PaymentsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/PaymentRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    PaymentResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        amount:
          type: string
          description: Описание платежа
          example: 1000 RUB
        incomeAmount:
          type: string
          description: Описание платежа
          example: 1000 RUB
        description:
          type: string
          description: Описание платежа
          example: описание платежа
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: 2021-01-01T10:00:00.147Z
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: 2021-01-01T10:00:00.147Z
      required:
        - id
        - amount
        - incomeAmount
        - description
        - createdAt
        - updatedAt
    PaymentsGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество оплат
        data:
          description: Оплаты
          type: array
          items:
            $ref: "#/components/schemas/PaymentResponse"
      required:
        - status
        - count
        - data
    PlaylistPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          example: "1234567"
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
    PlaylistsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/PlaylistPartialRequest"
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
      required:
        - where
        - scope
    PlaylistsGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        count:
          type: number
          description: Количество плэйлистов
        data:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - count
        - data
    PlaylistCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
        files:
          description: Файлы
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - files
    PlaylistGetResponse:
      type: object
      properties:
        status:
          type: string
          description: Статус операции
          enum:
            - success
            - error
          example: success
        data:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - data
    PlaylistUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
        files:
          description: Файлы
          type: array
          items:
            type: string
            format: uuid
externalDocs:
  description: MyScreen backend API
  url: https://api.myscreen.ru
