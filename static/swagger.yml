openapi: 3.0.0
paths:
  /api/v2/auth:
    get:
      operationId: auth-get
      summary: >-
        Проверяет, авторизован ли пользователь и выдает о пользователе полную
        информацию
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": &ref_0
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_1
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404": &ref_2
          description: Монитор не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "412": &ref_3
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedError"
        "500": &ref_4
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_5
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_6
        - auth
      security:
        - bearer: []
    patch:
      operationId: auth-update
      summary: Изменение аккаунта пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
      security:
        - bearer: []
  /api/v2/auth/login:
    post:
      operationId: auth-login
      summary: Авторизация пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/register:
    post:
      operationId: auth-register
      summary: Регистрация пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/refresh:
    post:
      operationId: refresh
      summary: Обновление токена
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRefreshRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRefreshResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/email-verify:
    post:
      operationId: auth-email-verify
      summary: Подтвердить email пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/reset-password:
    post:
      operationId: auth-reset-password
      summary: Отправить на почту пользователю разрешение на смену пароля
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordInvitationRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/reset-password-verify:
    post:
      operationId: auth-reset-password-verify
      summary: Меняет пароль пользователя по приглашению из почты
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordVerifyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/auth/disable:
    patch:
      operationId: auth-disable
      summary: Скрытие аккаунта пользователя
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
      security:
        - bearer: []
  /api/v2/auth/monitor:
    post:
      operationId: auth-monitor
      summary: Авторизация монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthMonitorRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRefreshResponse"
        "400": *ref_0
        "401": *ref_1
        "404": *ref_2
        "412": *ref_3
        "500": *ref_4
        "503": *ref_5
      tags: *ref_6
  /api/v2/monitor:
    post:
      operationId: monitors-get
      summary: Получение списка мониторов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": &ref_7
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_8
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_9
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_10
          description: Монитор не найден
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_11
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_12
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_13
        - monitor
      security: &ref_14
        - bearer: []
    put:
      operationId: monitor-create
      summary: Создание монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/monitor/playlist:
    patch:
      operationId: monitor-playlist-create
      summary: Создание связки плэйлиста и монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
    delete:
      operationId: monitor-playlist-delete
      summary: Удаление связки плэйлиста и монитора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorsPlaylistAttachRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorsGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/monitor/{monitorId}:
    get:
      operationId: monitor-get
      summary: Получение монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
    patch:
      operationId: monitor-update
      summary: Изменение монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
    delete:
      operationId: monitor-delete
      summary: Удаление монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/monitor/{monitorId}/favoritePlus:
    get:
      operationId: monitor-favorite-plus
      summary: Избранное +
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/monitor/{monitorId}/favoriteMinus:
    get:
      operationId: monitor-favorite-minus
      summary: Избранное -
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/monitor/{monitorId}/applications:
    get:
      operationId: monitor-get-applications
      summary: Получение плэйлиста монитора
      parameters:
        - name: monitorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationsGetResponse"
        "400": *ref_7
        "401": *ref_8
        "403": *ref_9
        "404": *ref_10
        "500": *ref_11
        "503": *ref_12
      tags: *ref_13
      security: *ref_14
  /api/v2/editor:
    post:
      operationId: editors-get
      summary: Получение списка редакторов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorsGetResponse"
        "400": &ref_15
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_16
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_17
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_18
          description: Ошибка монитора
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_19
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_20
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_21
        - editor
      security: &ref_22
        - bearer: []
    put:
      operationId: editor-create
      summary: Создание редактора
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/{editorId}:
    get:
      operationId: editor-get
      summary: Получение редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
    patch:
      operationId: editor-update
      summary: Изменить редактор
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
    delete:
      operationId: editor-delete
      summary: Удаление редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/layer/{editorId}:
    put:
      operationId: editor-layer-create
      summary: Создание слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/layer/{editorId}/{layerId}:
    get:
      operationId: editor-layer-get
      summary: Получение слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
    patch:
      operationId: editor-layer-update
      summary: Изменить слой редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorLayerUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorLayerGetResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
    delete:
      operationId: editor-layer-delete
      summary: Удаление слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/layer/{editorId}/{layerId}/{moveIndex}:
    put:
      operationId: editor-layer-move
      summary: Изменить очередь слоя редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: layerId
          required: true
          in: path
          schema:
            type: string
        - name: moveIndex
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/frame/{editorId}/{time}:
    post:
      operationId: editor-frame-get
      summary: Получение кадра из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
        - name: time
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: Успешный ответ
          content:
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/editor/export/{editorId}:
    get:
      operationId: editor-export-status
      summary: Узнать статус экспорта видео из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetRenderingStatusResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
    post:
      operationId: editor-export
      summary: Экспорт видео из редактора
      parameters:
        - name: editorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditorExportRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorGetRenderingStatusResponse"
        "400": *ref_15
        "401": *ref_16
        "403": *ref_17
        "404": *ref_18
        "500": *ref_19
        "503": *ref_20
      tags: *ref_21
      security: *ref_22
  /api/v2/file:
    post:
      operationId: files-get
      summary: Получение списка файлов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesGetResponse"
        "400": &ref_23
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_24
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_25
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_26
          description: Ошибка файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409": &ref_27
          description: Ответ для конфликта файлов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500": &ref_28
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_29
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_30
        - file
      security: &ref_31
        - bearer: []
    put:
      operationId: file-upload
      summary: Загрузка файлов
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
                - param
              properties:
                files:
                  type: array
                  description: Файл(ы)
                  items:
                    type: string
                    format: binary
                param:
                  type: object
                  description: Параметры загрузки файла
                  $ref: "#/components/schemas/FileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesUploadResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
    patch:
      operationId: files-update
      summary: Изменить файлы
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
    delete:
      operationId: files-delete
      summary: Удаление файла
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesDeleteRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
  /api/v2/file/copy:
    patch:
      operationId: files-copy
      summary: Скопировать файлы
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesCopyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
  /api/v2/file/{fileId}:
    get:
      operationId: file-download
      summary: Скачивание файла
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/mp4:
              encoding:
                video_mp4:
                  contentType: video/mp4
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
            image/png:
              encoding:
                image_png:
                  contentType: image/png
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
    post:
      operationId: file-get
      summary: Получить файл
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
    patch:
      operationId: file-update
      summary: Изменить файл
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileGetResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
    delete:
      operationId: file-delete
      summary: Удаление файла
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
  /api/v2/file/{fileId}/preview:
    get:
      operationId: file-download-preview
      summary: Получить файл превью
      parameters:
        - name: fileId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            video/webm:
              encoding:
                video_webm:
                  contentType: video/webm
            image/jpeg:
              encoding:
                image_jpeg:
                  contentType: image/jpeg
        "400": *ref_23
        "401": *ref_24
        "403": *ref_25
        "404": *ref_26
        "409": *ref_27
        "500": *ref_28
        "503": *ref_29
      tags: *ref_30
      security: *ref_31
  /api/v2/folder:
    post:
      operationId: folders-get
      summary: Получение списка папок
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoldersGetResponse"
        "400": &ref_32
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_33
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_34
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_35
          description: Ошибка папки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_36
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      tags: &ref_37
        - folder
      security: &ref_38
        - bearer: []
    put:
      operationId: folder-create
      summary: Создание новой папки
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderCreateRequest"
      responses:
        "201":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
    patch:
      operationId: folders-update
      summary: Изменение информации о папках
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
    delete:
      operationId: folders-delete
      summary: Удаление папок
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersDeleteRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
  /api/v2/folder/copy:
    patch:
      operationId: folders-copy
      summary: Копирование папок
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoldersCopyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
  /api/v2/folder/{folderId}:
    get:
      operationId: folder-get
      summary: Получение информации о папке
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
    patch:
      operationId: folder-update
      summary: Изменение информации о папке
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderGetResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
    delete:
      operationId: folder-delete
      summary: Удаление папки
      parameters:
        - name: folderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_32
        "401": *ref_33
        "403": *ref_34
        "404": *ref_35
        "500": *ref_36
      tags: *ref_37
      security: *ref_38
  /api/v2/user:
    post:
      operationId: users-get
      summary: Получение информации о пользователях (только администратор)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersGetResponse"
        "400": &ref_39
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_40
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_41
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "500": &ref_42
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      tags: &ref_43
        - user
      security: &ref_44
        - bearer: []
  /api/v2/user/disable/{userId}:
    patch:
      operationId: user-disable
      summary: Скрытие аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_39
        "401": *ref_40
        "403": *ref_41
        "500": *ref_42
      tags: *ref_43
      security: *ref_44
  /api/v2/user/enable/{userId}:
    patch:
      operationId: user-enable
      summary: Открытие аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_39
        "401": *ref_40
        "403": *ref_41
        "500": *ref_42
      tags: *ref_43
      security: *ref_44
  /api/v2/user/{userId}:
    get:
      operationId: user-get
      summary: Получение информации о пользователе (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_39
        "401": *ref_40
        "403": *ref_41
        "500": *ref_42
      tags: *ref_43
      security: *ref_44
    patch:
      operationId: user-update
      summary: Изменение информации о пользователе (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGetResponse"
        "400": *ref_39
        "401": *ref_40
        "403": *ref_41
        "500": *ref_42
      tags: *ref_43
      security: *ref_44
    delete:
      operationId: user-delete
      summary: Удаление аккаунта пользователя (только администратор)
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_39
        "401": *ref_40
        "403": *ref_41
        "500": *ref_42
      tags: *ref_43
      security: *ref_44
  /api/v2/order:
    post:
      operationId: orders-get
      summary: Получение списка заказов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrdersGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersGetResponse"
        "400": &ref_45
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_46
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_47
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_48
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_49
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_50
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_51
        - order
      security: &ref_52
        - bearer: []
  /api/v2/order/invoice:
    post:
      operationId: invoice
      summary: Выставление счетов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": *ref_45
        "401": *ref_46
        "403": *ref_47
        "404": *ref_48
        "500": *ref_49
        "503": *ref_50
      tags: *ref_51
      security: *ref_52
  /api/v2/payment:
    post:
      operationId: payments-get
      summary: Получение списка оплат
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentsGetResponse"
        "400":
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags:
        - payment
      security:
        - bearer: []
  /api/v2/playlist:
    post:
      operationId: playlists-get
      summary: Получение списка плэйлистов
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistsGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistsGetResponse"
        "400": &ref_53
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_54
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_55
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_56
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_57
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_58
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_59
        - playlist
      security: &ref_60
        - bearer: []
    put:
      operationId: playlist-create
      summary: Создание плэйлиста
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistCreateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_53
        "401": *ref_54
        "403": *ref_55
        "404": *ref_56
        "500": *ref_57
        "503": *ref_58
      tags: *ref_59
      security: *ref_60
  /api/v2/playlist/{playlistId}:
    get:
      operationId: playlist-get
      summary: Получение плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_53
        "401": *ref_54
        "403": *ref_55
        "404": *ref_56
        "500": *ref_57
        "503": *ref_58
      tags: *ref_59
      security: *ref_60
    patch:
      operationId: playlist-update
      summary: Обновление плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistGetResponse"
        "400": *ref_53
        "401": *ref_54
        "403": *ref_55
        "404": *ref_56
        "500": *ref_57
        "503": *ref_58
      tags: *ref_59
      security: *ref_60
    delete:
      operationId: playlist-delete
      summary: Удаление плэйлиста
      parameters:
        - name: playlistId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_53
        "401": *ref_54
        "403": *ref_55
        "404": *ref_56
        "500": *ref_57
        "503": *ref_58
      tags: *ref_59
      security: *ref_60
  /api/v2/statistics:
    get:
      operationId: statistics
      summary: Получение статистики
      parameters: []
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsResponse"
        "400": &ref_61
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_62
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_63
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_64
          description: Ошибка медиа
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_65
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503": &ref_66
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      tags: &ref_67
        - statistics
      security: &ref_68
        - bearer: []
  /api/v2/statistics/deviceStatus:
    post:
      operationId: deviceStatus
      summary: Отчёт по статусу устройства
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDeviceStatusRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": *ref_61
        "401": *ref_62
        "403": *ref_63
        "404": *ref_64
        "500": *ref_65
        "503": *ref_66
      tags: *ref_67
      security: *ref_68
  /api/v2/statistics/reportViews:
    post:
      operationId: reportViews
      summary: Отчёт по показам
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportViewsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/vnd.ms-excel:
              encoding:
                ms_excel:
                  contentType: application/vnd.ms-excel
            application/pdf:
              encoding:
                pdf:
                  contentType: application/pdf
        "400": *ref_61
        "401": *ref_62
        "403": *ref_63
        "404": *ref_64
        "500": *ref_65
        "503": *ref_66
      tags: *ref_67
      security: *ref_68
  /api/v2/application:
    post:
      operationId: applications-get
      summary: Получение списка заявок
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationGetRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationsGetResponse"
        "400": &ref_69
          description: Ответ будет таким если с данным что-то не так
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401": &ref_70
          description: Ответ для незарегистрированного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403": &ref_71
          description: Ответ для неавторизованного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404": &ref_72
          description: Ошибка папки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500": &ref_73
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      tags: &ref_74
        - application
      security: &ref_75
        - bearer: []
  /api/v2/application/{applicationId}:
    get:
      operationId: application-get
      summary: Получение заявки
      parameters:
        - name: applicationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetResponse"
        "400": *ref_69
        "401": *ref_70
        "403": *ref_71
        "404": *ref_72
        "500": *ref_73
      tags: *ref_74
      security: *ref_75
    patch:
      operationId: application-update
      summary: Изменить заявку
      parameters:
        - name: applicationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGetResponse"
        "400": *ref_69
        "401": *ref_70
        "403": *ref_71
        "404": *ref_72
        "500": *ref_73
      tags: *ref_74
      security: *ref_75
    delete:
      operationId: application-delete
      summary: Удаление заявки
      parameters:
        - name: applicationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400": *ref_69
        "401": *ref_70
        "403": *ref_71
        "404": *ref_72
        "500": *ref_73
      tags: *ref_74
      security: *ref_75
info:
  title: MyScreen backend API
  description: MyScreen backend API
  version: 2.36.1
  contact:
    name: Stanislav V Vyaliy
    url: https://wisekaa.dev
    email: stanislav@wisekaa.dev
tags:
  - name: auth
    description: Аутентификация пользователя
  - name: user
    description: Пользователи (только администратор)
  - name: folder
    description: Папки
  - name: file
    description: Файлы
  - name: playlist
    description: Плейлисты
  - name: monitor
    description: Мониторы
  - name: editor
    description: Редакторы
  - name: application
    description: Взаимодействия покупателей и продавца
  - name: statistics
    description: Cтатистика
  - name: order
    description: Заказы
  - name: payment
    description: Оплата
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Токен авторизации
      name: token
  schemas:
    Status:
      type: string
      enum:
        - success
        - error
    BadRequestError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 400
        code:
          type: string
          example: server-error.10004
        message:
          type: string
          example: Bad request
      required:
        - status
        - statusCode
        - code
        - message
    UnauthorizedError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 401
        code:
          type: string
          example: server-error.10001
        message:
          type: string
          example: Unauthorized request
      required:
        - status
        - statusCode
        - code
        - message
    NotFoundError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 404
        code:
          type: string
          example: server-error.10005
        message:
          type: string
          example: Not Found
      required:
        - status
        - statusCode
        - code
        - message
    PreconditionFailedError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 412
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: User exists
      required:
        - status
        - statusCode
        - code
        - message
    InternalServerError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 500
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Server error
      required:
        - status
        - statusCode
        - code
        - message
    ServiceUnavailableError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 503
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Service Unavailable
      required:
        - status
        - statusCode
        - code
        - message
    UserRoleResponse:
      type: string
      enum:
        - monitor
        - monitor-owner
        - advertiser
        - administrator
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор пользователя
          format: uuid
          example: "1234567"
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          nullable: true
        name:
          type: string
          description: Имя
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          nullable: true
        country:
          type: string
          description: Страна
          example: RU
          nullable: true
        company:
          type: string
          description: Компания
          example: ACME corporation
          nullable: true
        storageSpace:
          type: number
          description: Дисковое пространство
          example: 20000000
        role:
          description: Роль пользователя
          example: advertiser
          $ref: "#/components/schemas/UserRoleResponse"
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
        countUsedSpace:
          type: number
          description: Использованное место
          example: 0
      required:
        - id
        - email
        - role
        - createdAt
        - updatedAt
    UserGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - data
    UserRoleRequest:
      type: string
      enum:
        - monitor-owner
        - advertiser
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          nullable: true
        name:
          type: string
          description: Имя
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          example: Doe
          nullable: true
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          nullable: true
        country:
          type: string
          description: Страна
          example: RU
          nullable: true
        company:
          type: string
          description: Компания
          example: ACME corporation
          nullable: true
        role:
          description: Роль пользователя
          example: advertiser
          $ref: "#/components/schemas/UserRoleRequest"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
      required:
        - email
        - password
    AuthenticationPayload:
      type: object
      properties:
        type:
          type: string
          description: "Тип: Bearer"
          example: bearer
        token:
          type: string
          description: "Токен, используемый в Authorization: Bearer"
          example: eyJcbGciOcJIUcI1xxxxxxxxxxxxxxxx
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - type
        - token
        - refreshToken
    AuthResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
        data:
          description: Пользователь
          allOf:
            - $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - payload
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          nullable: true
        name:
          type: string
          description: Имя
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          example: Doe
          nullable: true
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          nullable: true
        country:
          type: string
          description: Страна
          example: RU
          nullable: true
        company:
          type: string
          description: Компания
          example: ACME corporation
          nullable: true
        role:
          description: Роль пользователя
          example: advertiser
          $ref: "#/components/schemas/UserRoleRequest"
      required:
        - email
        - password
        - role
    AuthRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh токен, используемый для запросов /api/v2/refresh
          example: exJxcGxiOxJIxzIxNixsIxR5cxxxxxxxxxxx.E9jKilfGxxxxxxxxxxxxx
      required:
        - refreshToken
    AuthRefreshResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        payload:
          description: Возвращаемый токен
          allOf:
            - $ref: "#/components/schemas/AuthenticationPayload"
      required:
        - status
        - payload
    VerifyEmailRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
      required:
        - verify
    SuccessResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
      required:
        - status
    ResetPasswordInvitationRequest:
      type: object
      properties:
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
      required:
        - email
    ResetPasswordVerifyRequest:
      type: object
      properties:
        verify:
          type: string
          example: j481y1b
        password:
          type: string
          example: Secret~12345678
      required:
        - verify
        - password
    AuthMonitorRequest:
      type: object
      properties:
        code:
          type: string
          description: Используется для обозначения монитора
          example: 123-456-789
      required:
        - code
    ForbiddenError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 403
        code:
          type: string
          example: server-error.10002
        message:
          type: string
          example: Forbidden
      required:
        - status
        - statusCode
        - code
        - message
    Address:
      type: object
      properties:
        country:
          type: string
          description: Страна
          example: Россия
        city:
          type: string
          description: Город
          example: Краснодар
        street:
          type: string
          description: Улица
          example: Красная
        house:
          type: string
          description: Дом
          example: "1"
        room:
          type: string
          description: Комната
          example: "1"
    MonitorCategory:
      type: string
      enum:
        - FOOD
        - CAFES_AND_RESTAURANTS
        - PHARMACY
        - ATM
        - HOTEL
        - AUTO_REPAIR
        - CAR_WASHING
        - HOSPITALS
        - CINEMAS
        - MALL
        - SAUNAS
        - BEAUTY_SALONS
        - GAS_STATION
    MonitorOrientation:
      type: string
      enum:
        - Horizontal
        - Vertical
    MonitorInfo:
      type: object
      properties:
        model:
          type: string
          description: Модель
          example: Samsung
        resolution:
          type: string
          description: Разрешение
          example: 3840x2190
        angle:
          type: number
          description: Угол обзора
          example: 0
        matrix:
          type: string
          description: Тип матрицы
          example: IPS
        brightness:
          type: number
          description: Яркость
          example: 0
    MonitorStatus:
      type: string
      enum:
        - offline
        - online
    PointClass:
      type: object
      properties:
        type:
          type: string
          description: Point
          example: Point
        coordinates:
          description: "[ Долгота, Широта ]"
          example:
            - 38.97603
            - 45.04484
          type: array
          items:
            type: number
      required:
        - type
        - coordinates
    MonitorPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: &ref_76
            city: Krasnodar
            country: Russia
            street: Krasnaya
            house: "122"
            room: "1"
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: integer
          description: Стоимость показа 1 секунды в рублях
          example: 1
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          $ref: "#/components/schemas/MonitorOrientation"
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: &ref_77
            model: Samsung
            resolution: 1920 x 1080 px
            angle: 0
            matrix: IPS
            brightness: 0
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        status:
          description: Подключен
          example: offline
          $ref: "#/components/schemas/MonitorStatus"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
          nullable: true
        location:
          example: &ref_78
            type: Point
            coordinates:
              - 38.97603
              - 45.04484
          allOf:
            - $ref: "#/components/schemas/PointClass"
        favorite:
          type: boolean
          description: Избранный монитор
          example: false
        dateWhenApp:
          description: Время начала проигрывания
          example:
            - "2021-01-01"
            - "2022-12-31"
          type: array
          items:
            type: array
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2022-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2022-12-31"
          type: array
          items:
            type: array
    Order:
      type: string
      enum:
        - ASC
        - DESC
    LimitOrderRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Order"
        name:
          $ref: "#/components/schemas/Order"
        description:
          $ref: "#/components/schemas/Order"
        extension:
          $ref: "#/components/schemas/Order"
        width:
          $ref: "#/components/schemas/Order"
        height:
          $ref: "#/components/schemas/Order"
        folder:
          $ref: "#/components/schemas/Order"
        folderId:
          $ref: "#/components/schemas/Order"
        monitor:
          $ref: "#/components/schemas/Order"
        monitorId:
          $ref: "#/components/schemas/Order"
        videoType:
          $ref: "#/components/schemas/Order"
        filesize:
          $ref: "#/components/schemas/Order"
        category:
          $ref: "#/components/schemas/Order"
        duration:
          $ref: "#/components/schemas/Order"
        files:
          $ref: "#/components/schemas/Order"
        monitors:
          $ref: "#/components/schemas/Order"
        playlists:
          $ref: "#/components/schemas/Order"
        parentFolder:
          $ref: "#/components/schemas/Order"
        parentFolderId:
          $ref: "#/components/schemas/Order"
        email:
          $ref: "#/components/schemas/Order"
        surname:
          $ref: "#/components/schemas/Order"
        middleName:
          $ref: "#/components/schemas/Order"
        phoneNumber:
          $ref: "#/components/schemas/Order"
        city:
          $ref: "#/components/schemas/Order"
        country:
          $ref: "#/components/schemas/Order"
        company:
          $ref: "#/components/schemas/Order"
        role:
          $ref: "#/components/schemas/Order"
        verified:
          $ref: "#/components/schemas/Order"
        isDemoUser:
          $ref: "#/components/schemas/Order"
        countUsedSpace:
          $ref: "#/components/schemas/Order"
        address:
          $ref: "#/components/schemas/Order"
        price:
          $ref: "#/components/schemas/Order"
        orientation:
          $ref: "#/components/schemas/Order"
        monitorInfo:
          $ref: "#/components/schemas/Order"
        attached:
          $ref: "#/components/schemas/Order"
        code:
          $ref: "#/components/schemas/Order"
        status:
          $ref: "#/components/schemas/Order"
        longitude:
          $ref: "#/components/schemas/Order"
        latitude:
          $ref: "#/components/schemas/Order"
        renderingStatus:
          $ref: "#/components/schemas/Order"
        fps:
          $ref: "#/components/schemas/Order"
        renderingPercent:
          $ref: "#/components/schemas/Order"
        renderingError:
          $ref: "#/components/schemas/Order"
        renderedFile:
          $ref: "#/components/schemas/Order"
        renderedFileId:
          $ref: "#/components/schemas/Order"
        keepSourceAudio:
          $ref: "#/components/schemas/Order"
        totalDuration:
          $ref: "#/components/schemas/Order"
        videoLayers:
          $ref: "#/components/schemas/Order"
        audioLayers:
          $ref: "#/components/schemas/Order"
        createdAt:
          $ref: "#/components/schemas/Order"
        updatedAt:
          $ref: "#/components/schemas/Order"
        seller:
          $ref: "#/components/schemas/Order"
        buyer:
          $ref: "#/components/schemas/Order"
        playlist:
          $ref: "#/components/schemas/Order"
        favorite:
          $ref: "#/components/schemas/Order"
    LimitRequest:
      type: object
      properties:
        limit:
          type: number
          description: Лимит строк результатов
          example: 20
        page:
          type: number
          description: Страница результатов
          example: 1
        order:
          description: Порядок результатов
          example:
            createdAt: DESC
          allOf:
            - $ref: "#/components/schemas/LimitOrderRequest"
    MonitorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/MonitorPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - address
              - category
              - price1s
              - minWarranty
              - maxDuration
              - orientation
              - monitorInfo
              - attached
              - status
              - playlistPlayed
              - code
              - lastSeen
              - location
              - favorite
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    PlaylistStatus:
      type: string
      enum:
        - Offline
        - Broadcast
        - NoBroadcast
    VideoType:
      type: string
      enum:
        - video
        - image
        - audio
        - other
    FileCategory:
      type: string
      enum:
        - ownership
        - photo
        - media
    FolderResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
          nullable: true
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
        empty:
          type: boolean
          description: Подчиненные в этой папке
          example: true
      required:
        - id
        - name
        - createdAt
        - updatedAt
    FileResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
        extension:
          type: string
          description: Расширение файла
          example: mp4
        hash:
          type: string
          description: Hash файла
          example: 2b0439011a3a215ae1756bfc342e5bbc
        videoType:
          description: Тип файла
          example: video
          $ref: "#/components/schemas/VideoType"
        category:
          description: В какую категорию относить файл
          example: media
          $ref: "#/components/schemas/FileCategory"
        filesize:
          type: number
          description: Размер файла
          example: 210000
        duration:
          type: number
          description: Продолжительность видео
          example: 10
        width:
          type: number
          description: Размер по горизонтали
          example: 1024
        height:
          type: number
          description: Размер по вертикали
          example: 1024
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
        folder:
          description: Папка
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
        monitors:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/MonitorResponse"
        playlists:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponse"
      required:
        - id
        - name
        - extension
        - hash
        - videoType
        - category
        - filesize
        - duration
        - width
        - height
        - createdAt
        - updatedAt
        - folder
    PlaylistResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          example: "1234567"
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
          nullable: true
        status:
          description: Статус
          example: Offline
          $ref: "#/components/schemas/PlaylistStatus"
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
        monitors:
          type: array
          description: Мониторы
          items:
            $ref: "#/components/schemas/MonitorResponse"
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - name
        - status
        - createdAt
        - updatedAt
        - monitors
        - files
    MonitorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_76
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: integer
          description: Стоимость показа 1 секунды в рублях
          example: 1
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          $ref: "#/components/schemas/MonitorOrientation"
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *ref_77
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        status:
          description: Подключен
          example: offline
          $ref: "#/components/schemas/MonitorStatus"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        lastSeen:
          type: string
          format: date-time
          description: Последний раз виден
          example: "2021-10-01T10:00:00.147Z"
          nullable: true
        location:
          example: *ref_78
          allOf:
            - $ref: "#/components/schemas/PointClass"
        favorite:
          type: boolean
          description: Избранный монитор
          example: false
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
        playlist:
          description: Плэйлист привязанный к монитору
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        files:
          description: Фото монитора. Документы на право владения.
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
      required:
        - id
        - name
        - category
        - orientation
        - monitorInfo
        - attached
        - status
        - playlistPlayed
        - lastSeen
        - favorite
        - createdAt
        - updatedAt
        - code
    MonitorsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество мониторов
        data:
          description: Мониторы
          type: array
          items:
            $ref: "#/components/schemas/MonitorResponse"
      required:
        - status
        - count
        - data
    MonitorCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_76
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: integer
          description: Стоимость показа 1 секунды в рублях
          example: 1
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          $ref: "#/components/schemas/MonitorOrientation"
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *ref_77
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        location:
          example: *ref_78
          allOf:
            - $ref: "#/components/schemas/PointClass"
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
      required:
        - name
        - category
        - orientation
        - monitorInfo
        - code
    MonitorGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorResponse"
      required:
        - status
        - data
    ApplicationCreateMonitorRequest:
      type: object
      properties:
        dateWhen:
          type: string
          format: date-time
          description: Время когда
          example: "2021-01-01T10:00:00.147Z"
        dateBefore:
          type: string
          format: date-time
          description: Время до
          example: "2021-10-01T10:00:00.147Z"
          nullable: true
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
      required:
        - dateWhen
        - playlistChange
    MonitorsPlaylistAttachRequest:
      type: object
      properties:
        playlistId:
          type: string
          description: Плэйлист
          format: uuid
        monitors:
          description: Мониторы
          type: array
          items:
            type: string
            format: uuid
        application:
          description: Создание заявки
          allOf:
            - $ref: "#/components/schemas/ApplicationCreateMonitorRequest"
      required:
        - playlistId
        - monitors
        - application
    ApplicationApproved:
      type: string
      enum:
        - NotProcessed
        - Allowed
        - Denied
    ApplicationResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор взаимодействия
          format: uuid
        buyer:
          description: Покупатель
          allOf:
            - $ref: "#/components/schemas/UserResponse"
        seller:
          description: Продавец
          allOf:
            - $ref: "#/components/schemas/UserResponse"
        monitor:
          description: Монитор
          allOf:
            - $ref: "#/components/schemas/MonitorResponse"
        playlist:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
        approved:
          description: Не обработан / Разрешен / Запрещен
          example: NotProcessed
          $ref: "#/components/schemas/ApplicationApproved"
        dateWhen:
          type: string
          format: date-time
          description: Время когда
          example: "2021-01-01T10:00:00.147Z"
        dateBefore:
          type: string
          format: date-time
          description: Время до
          example: "2021-10-01T10:00:00.147Z"
          nullable: true
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
      required:
        - id
        - buyer
        - seller
        - monitor
        - playlist
        - approved
        - dateWhen
        - playlistChange
        - createdAt
        - updatedAt
    ApplicationsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество взаимодействий
        data:
          description: Взаимодействия покупателей и продавца
          type: array
          items:
            $ref: "#/components/schemas/ApplicationResponse"
      required:
        - status
        - count
        - data
    MonitorUpdateRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор монитора
          format: uuid
        name:
          type: string
          description: Имя
          example: имя монитора
        address:
          description: Адрес монитора
          example: *ref_76
          allOf:
            - $ref: "#/components/schemas/Address"
        category:
          description: Категория
          example: GAS_STATION
          $ref: "#/components/schemas/MonitorCategory"
        price1s:
          type: integer
          description: Стоимость показа 1 секунды в рублях
          example: 1
        minWarranty:
          type: integer
          description: Гарантированное минимальное количество показов в день
          example: 1
        maxDuration:
          type: integer
          description: Максимальная длительность плэйлиста в секундах
          example: 1
        orientation:
          description: Ориентация экрана
          example: Horizontal
          $ref: "#/components/schemas/MonitorOrientation"
        monitorInfo:
          description: Модель и прочие характеристики монитора
          example: *ref_77
          allOf:
            - $ref: "#/components/schemas/MonitorInfo"
        attached:
          type: boolean
          description: Присоединен
          example: false
        status:
          description: Подключен
          example: offline
          $ref: "#/components/schemas/MonitorStatus"
        playlistPlayed:
          type: boolean
          description: Проигрывается плэйлист
          example: false
        code:
          type: string
          description: Идентификатор устройства
          example: 111-111-111
          nullable: true
        location:
          example: *ref_78
          allOf:
            - $ref: "#/components/schemas/PointClass"
    RenderingStatus:
      type: string
      enum:
        - initial
        - ready
        - pending
        - error
    EditorPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        renderingStatus:
          description: Статус рендеринга
          example: initial
          $ref: "#/components/schemas/RenderingStatus"
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    EditorsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/EditorPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - width
              - height
              - fps
              - renderingStatus
              - renderingPercent
              - renderingError
              - renderedFile
              - keepSourceAudio
              - totalDuration
              - videoLayers
              - audioLayers
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    EditorLayerResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор слоя
          example: "12345678"
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        file:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - id
        - index
        - duration
        - cutFrom
        - cutTo
        - start
        - mixVolume
        - createdAt
        - updatedAt
        - file
    EditorResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        renderingStatus:
          description: Статус рендеринга
          example: initial
          $ref: "#/components/schemas/RenderingStatus"
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
          nullable: true
        renderingError:
          type: string
          description: Ошибка рендеринга
          nullable: true
        renderedFile:
          description: Обработанный файл
          nullable: true
          allOf: &ref_79
            - $ref: "#/components/schemas/FileResponse"
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
        totalDuration:
          type: number
          description: Общее время
          example: 0
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        videoLayers:
          description: Видео слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
        audioLayers:
          description: Аудио слой
          type: array
          items:
            $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - id
        - name
        - width
        - height
        - fps
        - renderingStatus
        - renderingPercent
        - renderingError
        - renderedFile
        - keepSourceAudio
        - totalDuration
        - createdAt
        - updatedAt
        - videoLayers
        - audioLayers
    EditorsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество редакторов
        data:
          description: Оплаты
          type: array
          items:
            $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - count
        - data
    EditorCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
      required:
        - name
        - width
        - height
        - fps
        - keepSourceAudio
    EditorGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorResponse"
      required:
        - status
        - data
    EditorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя редактора
          example: имя редактора
        width:
          type: integer
          description: Ширина редактора
          example: 1920
        height:
          type: integer
          description: Высота редактора
          example: 1080
        fps:
          type: integer
          description: Фреймрейт
          example: 24
        keepSourceAudio:
          type: boolean
          description: Воспроизводить музыку с видео
          example: true
    EditorLayerCreateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
        file:
          type: string
          description: Файл
          format: uuid
      required:
        - file
    EditorLayerGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Слой редактора
          allOf:
            - $ref: "#/components/schemas/EditorLayerResponse"
      required:
        - status
        - data
    EditorLayerUpdateRequest:
      type: object
      properties:
        index:
          type: integer
          description: Индекс файла
          example: 1
          default: 1
        duration:
          type: number
          description: Длительность
          example: 10
          default: 10
        cutFrom:
          type: number
          description: С какой секунды начать вырезать клип
          example: 0
          default: 0
        cutTo:
          type: number
          description: До какой секунды вырезать клип
          example: 10
          default: 10
        start:
          type: number
          description: С какой секунды начинать воспроизводить клип
          default: 0
          example: 0
        mixVolume:
          type: integer
          description: Аудио дорожка из видео, 0-выключен, 1-включен
          example: 1
          default: 1
    EditorRenderingStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор редактора
          format: uuid
        renderingStatus:
          description: Статус рендеринга
          example: initial
          $ref: "#/components/schemas/RenderingStatus"
        renderingPercent:
          type: integer
          description: Процент рендеринга
          example: 0
          nullable: true
        renderingError:
          type: string
          description: Ошибка рендеринга
          nullable: true
        renderedFile:
          description: Обработанный файл
          nullable: true
          allOf: *ref_79
      required:
        - id
        - renderingStatus
        - renderingPercent
        - renderingError
        - renderedFile
    EditorGetRenderingStatusResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Редактор
          allOf:
            - $ref: "#/components/schemas/EditorRenderingStatusResponse"
      required:
        - status
        - data
    EditorExportRequest:
      type: object
      properties:
        rerender:
          type: boolean
          description: Перезапустить рендеринг
          default: false
          example: false
    FileIDResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
      required:
        - id
        - name
    ConflictDataFile:
      type: object
      properties:
        id:
          type: string
          description: ID ссылки
          format: uuid
        name:
          type: string
          description: Имя ссылки
          example: Имя ссылки
        file:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileIDResponse"
    ConflictData:
      type: object
      properties:
        video:
          description: Редакторы (видео)
          allOf:
            - $ref: "#/components/schemas/ConflictDataFile"
        audio:
          description: Редакторы (аудио)
          allOf:
            - $ref: "#/components/schemas/ConflictDataFile"
        playlist:
          description: Плэйлисты
          allOf:
            - $ref: "#/components/schemas/ConflictDataFile"
        monitor:
          description: Мониторы
          allOf:
            - $ref: "#/components/schemas/ConflictDataFile"
    ConflictError:
      type: object
      properties:
        status:
          example: error
          description: Статус операции
          $ref: "#/components/schemas/Status"
        statusCode:
          type: number
          example: 409
        code:
          type: string
          example: server-error.10000
        message:
          type: string
          example: Conflict exists
        data:
          $ref: "#/components/schemas/ConflictData"
      required:
        - status
        - statusCode
        - code
        - message
        - data
    FileUploadRequest:
      type: object
      properties:
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        category:
          description: В какую категорию относить файл
          example: media
          $ref: "#/components/schemas/FileCategory"
        monitorId:
          type: string
          format: uuid
          description: Монитор
    FilePartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        videoType:
          description: Тип файла
          example: video
          $ref: "#/components/schemas/VideoType"
        category:
          description: В какую категорию относить файл
          example: media
          $ref: "#/components/schemas/FileCategory"
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    FilesGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FilePartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - folderId
              - name
              - extension
              - hash
              - videoType
              - category
              - filesize
              - duration
              - width
              - height
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    FilesGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FilesUploadResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество файлов
        data:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - count
        - data
    FileUpdatesRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
      required:
        - id
    FilesUpdateRequest:
      type: object
      properties:
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileUpdatesRequest"
      required:
        - files
    FileGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Файл
          allOf:
            - $ref: "#/components/schemas/FileResponse"
      required:
        - status
        - data
    FileCopyRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
      required:
        - id
    FilesCopyRequest:
      type: object
      properties:
        toFolder:
          type: string
          description: Папка, куда копировать
          format: uuid
        files:
          description: Файлы
          type: array
          items:
            $ref: "#/components/schemas/FileCopyRequest"
      required:
        - toFolder
        - files
    FileUpdateRequest:
      type: object
      properties:
        folderId:
          type: string
          description: Идентификатор папки
          format: uuid
        name:
          type: string
          description: Имя файла
          example: foo.mp4
    FilesDeleteRequest:
      type: object
      properties:
        filesId:
          description: Файлы для удаления
          type: array
          items:
            type: string
            format: uuid
      required:
        - filesId
    FolderPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
          nullable: true
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    FoldersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/FolderPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - parentFolderId
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    FoldersGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество папок
          example: 1
        data:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - count
        - data
    FolderCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
          nullable: true
      required:
        - name
    FolderGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Папки
          allOf:
            - $ref: "#/components/schemas/FolderResponse"
      required:
        - status
        - data
    FolderRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
      required:
        - id
    FoldersUpdateRequest:
      type: object
      properties:
        folders:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderRequest"
      required:
        - folders
    FolderCopyRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          format: uuid
      required:
        - id
    FoldersCopyRequest:
      type: object
      properties:
        toFolder:
          type: string
          description: Папка, куда копировать
          format: uuid
        folders:
          description: Папки
          type: array
          items:
            $ref: "#/components/schemas/FolderCopyRequest"
      required:
        - toFolder
        - folders
    FoldersDeleteRequest:
      type: object
      properties:
        foldersId:
          description: Папки для удаления
          type: array
          items:
            type: string
            format: uuid
      required:
        - foldersId
    FolderUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Наименование папки
          example: bar
        parentFolderId:
          type: string
          description: Родительская папка
          format: uuid
    UserPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор пользователя
          format: uuid
          example: "1234567"
        email:
          type: string
          description: EMail пользователя
          format: email
          example: foo@bar.baz
        surname:
          type: string
          description: Фамилия
          example: Steve
          nullable: true
        name:
          type: string
          description: Имя
          example: John
          nullable: true
        middleName:
          type: string
          description: Отчество
          example: Doe
          nullable: true
        password:
          type: string
          example: Secret~12345678
          description: Пароля пользователя (должен удовлетворять минимальным требованиям)
          minLength: 8
          maxLength: 30
          pattern: |-
            /((?=.*d)|(?=.*W+))(?![.
            ])(?=.*[A-Z])(?=.*[a-z]).*$/
        phoneNumber:
          type: string
          description: Телефон пользователя
          example: "+78002000000"
          nullable: true
        city:
          type: string
          description: Город
          example: Krasnodar
          nullable: true
        country:
          type: string
          description: Страна
          example: RU
          nullable: true
        company:
          type: string
          description: Компания
          example: ACME corporation
          nullable: true
        storageSpace:
          type: number
          description: Дисковое пространство
          example: 20000000
        role:
          description: Роль пользователя
          example: advertiser
          $ref: "#/components/schemas/UserRoleResponse"
        verified:
          type: boolean
          description: EMail подтвержден
          example: true
        isDemoUser:
          type: boolean
          description: Демо пользователь (дата когда включится подписка)
          example: false
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    UsersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/UserPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - email
              - surname
              - name
              - middleName
              - phoneNumber
              - city
              - country
              - company
              - storageSpace
              - role
              - verified
              - isDemoUser
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    UsersGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество пользователей
        data:
          description: Пользователи
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
      required:
        - status
        - count
        - data
    OrderRequest:
      type: object
      properties:
        description:
          type: string
          description: Описание заказа
          example: описание заказа
    OrdersGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/OrderRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - description
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    OrderResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        description:
          type: string
          description: Описание заказа
          example: описание заказа
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
      required:
        - id
        - description
        - createdAt
        - updatedAt
    OrdersGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество заказов
        data:
          description: Заказы
          type: array
          items:
            $ref: "#/components/schemas/OrderResponse"
      required:
        - status
        - count
        - data
    InvoiceFormat:
      type: string
      enum:
        - xlsx
        - pdf
    InvoiceRequest:
      type: object
      properties:
        format:
          description: Формат получаемого файла
          example: xlsx
          $ref: "#/components/schemas/InvoiceFormat"
      required:
        - format
    PaymentRequest:
      type: object
      properties:
        description:
          type: string
          description: Описание платежа
          example: описание платежа
    PaymentsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/PaymentRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - amount
              - incomeAmount
              - description
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    PaymentResponse:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор файла
          example: "1234567"
          format: uuid
        amount:
          type: string
          description: Описание платежа
          example: 1000 RUB
        incomeAmount:
          type: string
          description: Описание платежа
          example: 1000 RUB
        description:
          type: string
          description: Описание платежа
          example: описание платежа
        createdAt:
          format: date-time
          type: string
          description: Время создания
          example: "2021-01-01T10:00:00.147Z"
        updatedAt:
          format: date-time
          type: string
          description: Время изменения
          example: "2021-01-01T10:00:00.147Z"
      required:
        - id
        - amount
        - incomeAmount
        - description
        - createdAt
        - updatedAt
    PaymentsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество оплат
        data:
          description: Оплаты
          type: array
          items:
            $ref: "#/components/schemas/PaymentResponse"
      required:
        - status
        - count
        - data
    PlaylistPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор плэйлиста
          example: "1234567"
          format: uuid
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
          nullable: true
        status:
          description: Статус
          example: Offline
          $ref: "#/components/schemas/PlaylistStatus"
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    PlaylistsGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/PlaylistPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - name
              - description
              - status
              - files
              - monitors
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    PlaylistsGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        count:
          type: number
          description: Количество плэйлистов
        data:
          description: Плэйлисты
          type: array
          items:
            $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - count
        - data
    PlaylistCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
          nullable: true
        files:
          description: Файлы
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - files
    PlaylistGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Плэйлист
          allOf:
            - $ref: "#/components/schemas/PlaylistResponse"
      required:
        - status
        - data
    PlaylistUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Имя плэйлиста
          example: имя плэйлиста
        description:
          type: string
          description: Описание плэйлиста
          example: описание плэйлиста
          nullable: true
        files:
          description: Файлы
          type: array
          items:
            type: string
            format: uuid
    StatisticsPlaylistResponse:
      type: object
      properties:
        added:
          type: number
          description: Добавленные
        played:
          type: number
          description: Запущенные
      required:
        - added
        - played
    StorageSpaceResponse:
      type: object
      properties:
        used:
          type: number
          description: Добавленные медиа
        unused:
          type: number
          description: Максимальное место
      required:
        - used
        - unused
    StatisticsResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        countDevices:
          type: number
          description: Количество устройств
        playlists:
          description: Плейлисты
          allOf:
            - $ref: "#/components/schemas/StatisticsPlaylistResponse"
        storageSpace:
          description: Дисковое пространство
          allOf:
            - $ref: "#/components/schemas/StorageSpaceResponse"
      required:
        - status
        - countDevices
        - playlists
        - storageSpace
    ReportDeviceStatusRequest:
      type: object
      properties:
        format:
          description: Формат получаемого файла
          example: xlsx
          $ref: "#/components/schemas/InvoiceFormat"
        dateFrom:
          format: date-time
          type: string
          description: Начальная дата
          example: "2022-05-01"
        dateTo:
          format: date-time
          type: string
          description: Конечная дата
          example: "2023-05-01"
      required:
        - format
        - dateFrom
        - dateTo
    ReportViewsRequest:
      type: object
      properties:
        format:
          description: Формат получаемого файла
          example: xlsx
          $ref: "#/components/schemas/InvoiceFormat"
        dateFrom:
          format: date-time
          type: string
          description: Начальная дата
          example: "2022-05-01"
        dateTo:
          format: date-time
          type: string
          description: Конечная дата
          example: "2023-05-01"
      required:
        - format
        - dateFrom
        - dateTo
    ApplicationPartialRequest:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор взаимодействия
          format: uuid
        buyerId:
          type: object
          description: Покупатель ID
          format: uuid
          nullable: true
        sellerId:
          type: string
          description: Продавец ID
          format: uuid
        monitorId:
          type: string
          description: Монитор ID
          format: uuid
        playlistId:
          type: string
          description: Плэйлист ID
          format: uuid
        approved:
          type: array
          description: Не обработан / Разрешен / Запрещен
          example:
            - NotProcessed
            - Allowed
          items:
            $ref: "#/components/schemas/ApplicationApproved"
        dateWhen:
          type: string
          format: date-time
          description: Время когда
          example: "2021-01-01T10:00:00.147Z"
        dateBefore:
          type: string
          format: date-time
          description: Время до
          example: "2021-10-01T10:00:00.147Z"
          nullable: true
        playlistChange:
          type: boolean
          description: "Смена текущего плэйлиста: сразу/когда закончится"
          example: false
        createdAt:
          description: Время создания
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
        updatedAt:
          description: Время изменения
          example:
            - "2021-01-01"
            - "2021-12-31"
          type: array
          items:
            type: array
    ApplicationGetRequest:
      type: object
      properties:
        where:
          description: Запрос
          allOf:
            - $ref: "#/components/schemas/ApplicationPartialRequest"
        select:
          type: array
          description: Выбрать поля
          example: []
          items:
            type: string
            enum:
              - id
              - buyer
              - buyerId
              - seller
              - sellerId
              - monitor
              - monitorId
              - playlist
              - playlistId
              - approved
              - dateWhen
              - dateBefore
              - playlistChange
              - createdAt
              - updatedAt
        scope:
          description: Рамки для запроса
          allOf:
            - $ref: "#/components/schemas/LimitRequest"
    ApplicationGetResponse:
      type: object
      properties:
        status:
          description: Статус операции
          example: success
          $ref: "#/components/schemas/Status"
        data:
          description: Взаимодействие покупателей и продавца
          allOf:
            - $ref: "#/components/schemas/ApplicationResponse"
      required:
        - status
        - data
    ApplicationUpdateRequest:
      type: object
      properties:
        approved:
          description: Не обработан / Разрешен / Запрещен
          example: NotProcessed
          $ref: "#/components/schemas/ApplicationApproved"
      required:
        - approved
externalDocs:
  description: MyScreen backend API
  url: https://api.myscreen.ru
